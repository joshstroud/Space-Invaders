{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./node_modules/howler/dist/howler.js","webpack:///./src/sounds/explosion.mp3","webpack:///./src/sounds/laser_default.mp3","webpack:///./src/sounds/enemy_laser.mp3","webpack:///./src/img/starfield-640x480.png","webpack:///./src/sounds/game_music.mp3","webpack:///./src/img/sprites-2x-transparent.png","webpack:///(webpack)/buildin/global.js","webpack:///./src/util/rectangle.js","webpack:///./src/util/vector.js","webpack:///./src/entities/entity.js","webpack:///./src/util/constants.js","webpack:///./src/util/sprite.js","webpack:///./src/entities/player.js","webpack:///./src/entities/bullet.js","webpack:///./src/entities/enemy.js","webpack:///./src/controllers/background.js","webpack:///./src/controllers/canvas_controller.js","webpack:///./src/ui/player_life.js","webpack:///./src/controllers/game.js","webpack:///./src/tests/game_tests.js","webpack:///./src/index.js"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","global","__WEBPACK_AMD_DEFINE_RESULT__","HowlerGlobal","this","init","self","Howler","_counter","_html5AudioPool","html5PoolSize","_codecs","_howls","_muted","_volume","_canPlayEvent","_navigator","window","navigator","masterGain","noAudio","usingWebAudio","autoSuspend","ctx","autoUnlock","_setup","volume","vol","parseFloat","setupAudioContext","gain","setValueAtTime","currentTime","length","_webAudio","ids","_getSoundIds","j","sound","_soundById","_node","mute","muted","unload","close","codecs","ext","replace","state","_autoSuspend","Audio","oncanplaythrough","e","_setupCodecs","audioTest","err","canPlayType","mpegTest","checkOpera","userAgent","match","isOldOpera","parseInt","split","mp3","mpeg","opus","ogg","oga","wav","aac","caf","m4a","mp4","weba","webm","dolby","flac","_unlockAudio","shouldUnlock","test","_audioUnlocked","_mobileUnloaded","sampleRate","_scratchBuffer","createBuffer","unlock","audioNode","_unlocked","_releaseHtml5Audio","load","_autoResume","source","createBufferSource","buffer","connect","destination","start","noteOn","resume","onended","disconnect","document","removeEventListener","_emit","addEventListener","_obtainHtml5Audio","pop","testPlay","play","Promise","then","catch","console","warn","audio","push","suspend","_sounds","_paused","_suspendTimer","clearTimeout","setTimeout","_resumeAfterSuspend","Howl","src","error","_autoplay","autoplay","_format","format","_html5","html5","_loop","loop","_pool","pool","_preload","preload","_rate","rate","_sprite","sprite","_src","undefined","_xhrWithCredentials","xhrWithCredentials","_duration","_state","_endTimers","_queue","_playLock","_onend","onend","fn","_onfade","onfade","_onload","onload","_onloaderror","onloaderror","_onplayerror","onplayerror","_onpause","onpause","_onplay","onplay","_onstop","onstop","_onmute","onmute","_onvolume","onvolume","_onrate","onrate","_onseek","onseek","_onunlock","onunlock","_onresume","event","action","url","str","exec","toLowerCase","location","protocol","slice","Sound","loadBuffer","internal","id","num","_ended","_id","_inactiveSound","soundId","_loadQueue","seek","Math","max","_seek","duration","timeout","abs","stop","setParams","_start","_stop","node","playWebAudio","_refreshBuffer","_playStart","bufferSource","noteGrainOn","Infinity","once","_clearTimer","playHtml5","playbackRate","paused","loadedNoReadyState","ejecta","readyState","isCocoonJS","listener","pause","_rateSeek","_stopFade","noteOff","_cleanBuffer","isNaN","arguments","_interval","args","indexOf","apply","fade","from","to","len","end","linearRampToValueAtTime","_startFadeInterval","isGroup","diff","steps","stepLen","lastTick","Date","now","_fadeTo","setInterval","tick","min","round","clearInterval","cancelScheduledValues","loopStart","loopEnd","playing","realTime","rateSeek","seekAndEmit","emitSeek","sounds","_errorFn","_loadFn","index","splice","remCache","cache","on","events","off","isId","keys","Array","isArray","msg","task","shift","ended","_drain","reset","limit","cnt","_panner","isIOS","vendor","howl","_parent","parent","createGain","createGainNode","_errorListener","_loadListener","code","ceil","__default","loadSound","data","atob","dataView","Uint8Array","charCodeAt","decodeAudioData","xhr","XMLHttpRequest","open","withCredentials","responseType","status","response","onerror","safeXhrSend","send","arraybuffer","success","AudioContext","webkitAudioContext","iOS","platform","appVersion","version","safari","standalone","_super","_pos","_orientation","stereo","pan","pos","x","y","z","positionX","setTargetAtTime","positionY","positionZ","setPosition","orientation","xUp","yUp","zUp","or","forwardX","forwardY","forwardZ","upX","upY","upZ","setOrientation","_stereo","_pannerAttr","coneInnerAngle","coneOuterAngle","coneOuterGain","distanceModel","maxDistance","panningModel","refDistance","rolloffFactor","_onstereo","onstereo","_onpos","onpos","_onorientation","onorientation","pannerType","createStereoPanner","setupPanner","orientationX","orientationY","orientationZ","pannerAttr","_coneInnerAngle","_coneOuterAngle","_coneOuterGain","_distanceModel","_maxDistance","_refDistance","_rolloffFactor","_panningModel","pa","panner","type","createPanner","g","Function","rectangle","[object Object]","width","height","otherRect","Vector2d","v2","sqrt","divisor","multiply","util_vector","entities_entity","position","direction","game","dt","newX","newY","updatePos","update","render","CANVAS_WIDTH","CANVAS_HEIGHT","util_sprite","image","framePos","spritePos","size","speed","frames","dir","onceFinishCallback","_index","done","newframePos","newPos","frame","idx","floor","frameX","frameY","drawImage","WAIT_TIME_AFTER_PLAYER_DEATH","player","canvasWidth","super","spriteImage","dying","removeLife","removeEntities","livesRemaining","setupPlayer","fireInterval","soundOn","howler","explosion_default","a","ENEMY_BULLET_TYPE","PLAYER_BULLET_TYPE","BULLET_SPEED","bullet_Bullet","soundSrc","laser_default_default","enemy_laser_default","fillStyle","fillRect","HOME_STATE","BULLET_FIRE_PERIOD","BULLET_FIRE_PERCENT","RED_ENEMY","GREEN_ENEMY","PURPLE_ENEMY","GOLD_ENEMY","enemy_Enemy","firePercent","firePeriod","random","fireTimer","randomPercentage","bullet","addEntity","background","Image","starfield_640x480_default","canvas_controller","canvas","getElementById","context","getContext","color","entity","clearRect","entities","uiElements","font","fillText","score","player_life","PLAYER_SPEED","controllers_game","canvasController","setupVariables","spritesImage","sprites_2x_transparent_default","setupEnemies","setupKeyHandlers","setupUI","setupMusic","lastTime","music","game_music_default","enemies","bullets","started","leftPressed","rightPressed","spacePressed","topLeftPos","e1","horzSpacing","horzIdx","e2","e3","vertSpacing","enemyBoundingRect","life","muteButton","getElementsByClassName","toggleSound","muteBtnIcon","classList","remove","add","keyDownHandler","keyUpHandler","preventDefault","keyCode","setup","requestAnimationFrame","message","innerText","reload","removeItemFromArray","item","array","some","handleBulletBounds","handleEnemyBounds","left","right","enemy","collisionPairs","entity1","entity2","collisionRect","intersects","handleEnemyPlayerCollision","handleEnemyBulletCollision","handlePlayerBulletCollision","lifeIdx","findIndex","el","die","gameWon","concludeGame","checkGameOver","handlePlayerMovement","handleSpacePress","checkEntityInBounds","checkCollisions","toggleDescription","description","aboutBtn","contains","target"],"mappings":"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","file":"bundle.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 8);\n","/*!\n *  howler.js v2.1.1\n *  howlerjs.com\n *\n *  (c) 2013-2018, James Simpson of GoldFire Studios\n *  goldfirestudios.com\n *\n *  MIT License\n */\n\n(function() {\n\n  'use strict';\n\n  /** Global Methods **/\n  /***************************************************************************/\n\n  /**\n   * Create the global controller. All contained methods and properties apply\n   * to all sounds that are currently playing or will be in the future.\n   */\n  var HowlerGlobal = function() {\n    this.init();\n  };\n  HowlerGlobal.prototype = {\n    /**\n     * Initialize the global Howler object.\n     * @return {Howler}\n     */\n    init: function() {\n      var self = this || Howler;\n\n      // Create a global ID counter.\n      self._counter = 1000;\n\n      // Pool of unlocked HTML5 Audio objects.\n      self._html5AudioPool = [];\n      self.html5PoolSize = 10;\n\n      // Internal properties.\n      self._codecs = {};\n      self._howls = [];\n      self._muted = false;\n      self._volume = 1;\n      self._canPlayEvent = 'canplaythrough';\n      self._navigator = (typeof window !== 'undefined' && window.navigator) ? window.navigator : null;\n\n      // Public properties.\n      self.masterGain = null;\n      self.noAudio = false;\n      self.usingWebAudio = true;\n      self.autoSuspend = true;\n      self.ctx = null;\n\n      // Set to false to disable the auto audio unlocker.\n      self.autoUnlock = true;\n\n      // Setup the various state values for global tracking.\n      self._setup();\n\n      return self;\n    },\n\n    /**\n     * Get/set the global volume for all sounds.\n     * @param  {Float} vol Volume from 0.0 to 1.0.\n     * @return {Howler/Float}     Returns self or current volume.\n     */\n    volume: function(vol) {\n      var self = this || Howler;\n      vol = parseFloat(vol);\n\n      // If we don't have an AudioContext created yet, run the setup.\n      if (!self.ctx) {\n        setupAudioContext();\n      }\n\n      if (typeof vol !== 'undefined' && vol >= 0 && vol <= 1) {\n        self._volume = vol;\n\n        // Don't update any of the nodes if we are muted.\n        if (self._muted) {\n          return self;\n        }\n\n        // When using Web Audio, we just need to adjust the master gain.\n        if (self.usingWebAudio) {\n          self.masterGain.gain.setValueAtTime(vol, Howler.ctx.currentTime);\n        }\n\n        // Loop through and change volume for all HTML5 audio nodes.\n        for (var i=0; i<self._howls.length; i++) {\n          if (!self._howls[i]._webAudio) {\n            // Get all of the sounds in this Howl group.\n            var ids = self._howls[i]._getSoundIds();\n\n            // Loop through all sounds and change the volumes.\n            for (var j=0; j<ids.length; j++) {\n              var sound = self._howls[i]._soundById(ids[j]);\n\n              if (sound && sound._node) {\n                sound._node.volume = sound._volume * vol;\n              }\n            }\n          }\n        }\n\n        return self;\n      }\n\n      return self._volume;\n    },\n\n    /**\n     * Handle muting and unmuting globally.\n     * @param  {Boolean} muted Is muted or not.\n     */\n    mute: function(muted) {\n      var self = this || Howler;\n\n      // If we don't have an AudioContext created yet, run the setup.\n      if (!self.ctx) {\n        setupAudioContext();\n      }\n\n      self._muted = muted;\n\n      // With Web Audio, we just need to mute the master gain.\n      if (self.usingWebAudio) {\n        self.masterGain.gain.setValueAtTime(muted ? 0 : self._volume, Howler.ctx.currentTime);\n      }\n\n      // Loop through and mute all HTML5 Audio nodes.\n      for (var i=0; i<self._howls.length; i++) {\n        if (!self._howls[i]._webAudio) {\n          // Get all of the sounds in this Howl group.\n          var ids = self._howls[i]._getSoundIds();\n\n          // Loop through all sounds and mark the audio node as muted.\n          for (var j=0; j<ids.length; j++) {\n            var sound = self._howls[i]._soundById(ids[j]);\n\n            if (sound && sound._node) {\n              sound._node.muted = (muted) ? true : sound._muted;\n            }\n          }\n        }\n      }\n\n      return self;\n    },\n\n    /**\n     * Unload and destroy all currently loaded Howl objects.\n     * @return {Howler}\n     */\n    unload: function() {\n      var self = this || Howler;\n\n      for (var i=self._howls.length-1; i>=0; i--) {\n        self._howls[i].unload();\n      }\n\n      // Create a new AudioContext to make sure it is fully reset.\n      if (self.usingWebAudio && self.ctx && typeof self.ctx.close !== 'undefined') {\n        self.ctx.close();\n        self.ctx = null;\n        setupAudioContext();\n      }\n\n      return self;\n    },\n\n    /**\n     * Check for codec support of specific extension.\n     * @param  {String} ext Audio file extention.\n     * @return {Boolean}\n     */\n    codecs: function(ext) {\n      return (this || Howler)._codecs[ext.replace(/^x-/, '')];\n    },\n\n    /**\n     * Setup various state values for global tracking.\n     * @return {Howler}\n     */\n    _setup: function() {\n      var self = this || Howler;\n\n      // Keeps track of the suspend/resume state of the AudioContext.\n      self.state = self.ctx ? self.ctx.state || 'suspended' : 'suspended';\n\n      // Automatically begin the 30-second suspend process\n      self._autoSuspend();\n\n      // Check if audio is available.\n      if (!self.usingWebAudio) {\n        // No audio is available on this system if noAudio is set to true.\n        if (typeof Audio !== 'undefined') {\n          try {\n            var test = new Audio();\n\n            // Check if the canplaythrough event is available.\n            if (typeof test.oncanplaythrough === 'undefined') {\n              self._canPlayEvent = 'canplay';\n            }\n          } catch(e) {\n            self.noAudio = true;\n          }\n        } else {\n          self.noAudio = true;\n        }\n      }\n\n      // Test to make sure audio isn't disabled in Internet Explorer.\n      try {\n        var test = new Audio();\n        if (test.muted) {\n          self.noAudio = true;\n        }\n      } catch (e) {}\n\n      // Check for supported codecs.\n      if (!self.noAudio) {\n        self._setupCodecs();\n      }\n\n      return self;\n    },\n\n    /**\n     * Check for browser support for various codecs and cache the results.\n     * @return {Howler}\n     */\n    _setupCodecs: function() {\n      var self = this || Howler;\n      var audioTest = null;\n\n      // Must wrap in a try/catch because IE11 in server mode throws an error.\n      try {\n        audioTest = (typeof Audio !== 'undefined') ? new Audio() : null;\n      } catch (err) {\n        return self;\n      }\n\n      if (!audioTest || typeof audioTest.canPlayType !== 'function') {\n        return self;\n      }\n\n      var mpegTest = audioTest.canPlayType('audio/mpeg;').replace(/^no$/, '');\n\n      // Opera version <33 has mixed MP3 support, so we need to check for and block it.\n      var checkOpera = self._navigator && self._navigator.userAgent.match(/OPR\\/([0-6].)/g);\n      var isOldOpera = (checkOpera && parseInt(checkOpera[0].split('/')[1], 10) < 33);\n\n      self._codecs = {\n        mp3: !!(!isOldOpera && (mpegTest || audioTest.canPlayType('audio/mp3;').replace(/^no$/, ''))),\n        mpeg: !!mpegTest,\n        opus: !!audioTest.canPlayType('audio/ogg; codecs=\"opus\"').replace(/^no$/, ''),\n        ogg: !!audioTest.canPlayType('audio/ogg; codecs=\"vorbis\"').replace(/^no$/, ''),\n        oga: !!audioTest.canPlayType('audio/ogg; codecs=\"vorbis\"').replace(/^no$/, ''),\n        wav: !!audioTest.canPlayType('audio/wav; codecs=\"1\"').replace(/^no$/, ''),\n        aac: !!audioTest.canPlayType('audio/aac;').replace(/^no$/, ''),\n        caf: !!audioTest.canPlayType('audio/x-caf;').replace(/^no$/, ''),\n        m4a: !!(audioTest.canPlayType('audio/x-m4a;') || audioTest.canPlayType('audio/m4a;') || audioTest.canPlayType('audio/aac;')).replace(/^no$/, ''),\n        mp4: !!(audioTest.canPlayType('audio/x-mp4;') || audioTest.canPlayType('audio/mp4;') || audioTest.canPlayType('audio/aac;')).replace(/^no$/, ''),\n        weba: !!audioTest.canPlayType('audio/webm; codecs=\"vorbis\"').replace(/^no$/, ''),\n        webm: !!audioTest.canPlayType('audio/webm; codecs=\"vorbis\"').replace(/^no$/, ''),\n        dolby: !!audioTest.canPlayType('audio/mp4; codecs=\"ec-3\"').replace(/^no$/, ''),\n        flac: !!(audioTest.canPlayType('audio/x-flac;') || audioTest.canPlayType('audio/flac;')).replace(/^no$/, '')\n      };\n\n      return self;\n    },\n\n    /**\n     * Some browsers/devices will only allow audio to be played after a user interaction.\n     * Attempt to automatically unlock audio on the first user interaction.\n     * Concept from: http://paulbakaus.com/tutorials/html5/web-audio-on-ios/\n     * @return {Howler}\n     */\n    _unlockAudio: function() {\n      var self = this || Howler;\n\n      // Only run this on certain browsers/devices.\n      var shouldUnlock = /iPhone|iPad|iPod|Android|BlackBerry|BB10|Silk|Mobi|Chrome|Safari/i.test(self._navigator && self._navigator.userAgent);\n      if (self._audioUnlocked || !self.ctx || !shouldUnlock) {\n        return;\n      }\n\n      self._audioUnlocked = false;\n      self.autoUnlock = false;\n\n      // Some mobile devices/platforms have distortion issues when opening/closing tabs and/or web views.\n      // Bugs in the browser (especially Mobile Safari) can cause the sampleRate to change from 44100 to 48000.\n      // By calling Howler.unload(), we create a new AudioContext with the correct sampleRate.\n      if (!self._mobileUnloaded && self.ctx.sampleRate !== 44100) {\n        self._mobileUnloaded = true;\n        self.unload();\n      }\n\n      // Scratch buffer for enabling iOS to dispose of web audio buffers correctly, as per:\n      // http://stackoverflow.com/questions/24119684\n      self._scratchBuffer = self.ctx.createBuffer(1, 1, 22050);\n\n      // Call this method on touch start to create and play a buffer,\n      // then check if the audio actually played to determine if\n      // audio has now been unlocked on iOS, Android, etc.\n      var unlock = function(e) {\n        // Create a pool of unlocked HTML5 Audio objects that can\n        // be used for playing sounds without user interaction. HTML5\n        // Audio objects must be individually unlocked, as opposed\n        // to the WebAudio API which only needs a single activation.\n        // This must occur before WebAudio setup or the source.onended\n        // event will not fire.\n        for (var i=0; i<self.html5PoolSize; i++) {\n          var audioNode = new Audio();\n\n          // Mark this Audio object as unlocked to ensure it can get returned\n          // to the unlocked pool when released.\n          audioNode._unlocked = true;\n\n          // Add the audio node to the pool.\n          self._releaseHtml5Audio(audioNode);\n        }\n\n        // Loop through any assigned audio nodes and unlock them.\n        for (var i=0; i<self._howls.length; i++) {\n          if (!self._howls[i]._webAudio) {\n            // Get all of the sounds in this Howl group.\n            var ids = self._howls[i]._getSoundIds();\n\n            // Loop through all sounds and unlock the audio nodes.\n            for (var j=0; j<ids.length; j++) {\n              var sound = self._howls[i]._soundById(ids[j]);\n\n              if (sound && sound._node && !sound._node._unlocked) {\n                sound._node._unlocked = true;\n                sound._node.load();\n              }\n            }\n          }\n        }\n\n        // Fix Android can not play in suspend state.\n        self._autoResume();\n\n        // Create an empty buffer.\n        var source = self.ctx.createBufferSource();\n        source.buffer = self._scratchBuffer;\n        source.connect(self.ctx.destination);\n\n        // Play the empty buffer.\n        if (typeof source.start === 'undefined') {\n          source.noteOn(0);\n        } else {\n          source.start(0);\n        }\n\n        // Calling resume() on a stack initiated by user gesture is what actually unlocks the audio on Android Chrome >= 55.\n        if (typeof self.ctx.resume === 'function') {\n          self.ctx.resume();\n        }\n\n        // Setup a timeout to check that we are unlocked on the next event loop.\n        source.onended = function() {\n          source.disconnect(0);\n\n          // Update the unlocked state and prevent this check from happening again.\n          self._audioUnlocked = true;\n\n          // Remove the touch start listener.\n          document.removeEventListener('touchstart', unlock, true);\n          document.removeEventListener('touchend', unlock, true);\n          document.removeEventListener('click', unlock, true);\n\n          // Let all sounds know that audio has been unlocked.\n          for (var i=0; i<self._howls.length; i++) {\n            self._howls[i]._emit('unlock');\n          }\n        };\n      };\n\n      // Setup a touch start listener to attempt an unlock in.\n      document.addEventListener('touchstart', unlock, true);\n      document.addEventListener('touchend', unlock, true);\n      document.addEventListener('click', unlock, true);\n\n      return self;\n    },\n\n    /**\n     * Get an unlocked HTML5 Audio object from the pool. If none are left,\n     * return a new Audio object and throw a warning.\n     * @return {Audio} HTML5 Audio object.\n     */\n    _obtainHtml5Audio: function() {\n      var self = this || Howler;\n\n      // Return the next object from the pool if one exists.\n      if (self._html5AudioPool.length) {\n        return self._html5AudioPool.pop();\n      }\n\n      //.Check if the audio is locked and throw a warning.\n      var testPlay = new Audio().play();\n      if (testPlay && typeof Promise !== 'undefined' && (testPlay instanceof Promise || typeof testPlay.then === 'function')) {\n        testPlay.catch(function() {\n          console.warn('HTML5 Audio pool exhausted, returning potentially locked audio object.');\n        });\n      }\n\n      return new Audio();\n    },\n\n    /**\n     * Return an activated HTML5 Audio object to the pool.\n     * @return {Howler}\n     */\n    _releaseHtml5Audio: function(audio) {\n      var self = this || Howler;\n\n      // Don't add audio to the pool if we don't know if it has been unlocked.\n      if (audio._unlocked) {\n        self._html5AudioPool.push(audio);\n      }\n\n      return self;\n    },\n\n    /**\n     * Automatically suspend the Web Audio AudioContext after no sound has played for 30 seconds.\n     * This saves processing/energy and fixes various browser-specific bugs with audio getting stuck.\n     * @return {Howler}\n     */\n    _autoSuspend: function() {\n      var self = this;\n\n      if (!self.autoSuspend || !self.ctx || typeof self.ctx.suspend === 'undefined' || !Howler.usingWebAudio) {\n        return;\n      }\n\n      // Check if any sounds are playing.\n      for (var i=0; i<self._howls.length; i++) {\n        if (self._howls[i]._webAudio) {\n          for (var j=0; j<self._howls[i]._sounds.length; j++) {\n            if (!self._howls[i]._sounds[j]._paused) {\n              return self;\n            }\n          }\n        }\n      }\n\n      if (self._suspendTimer) {\n        clearTimeout(self._suspendTimer);\n      }\n\n      // If no sound has played after 30 seconds, suspend the context.\n      self._suspendTimer = setTimeout(function() {\n        if (!self.autoSuspend) {\n          return;\n        }\n\n        self._suspendTimer = null;\n        self.state = 'suspending';\n        self.ctx.suspend().then(function() {\n          self.state = 'suspended';\n\n          if (self._resumeAfterSuspend) {\n            delete self._resumeAfterSuspend;\n            self._autoResume();\n          }\n        });\n      }, 30000);\n\n      return self;\n    },\n\n    /**\n     * Automatically resume the Web Audio AudioContext when a new sound is played.\n     * @return {Howler}\n     */\n    _autoResume: function() {\n      var self = this;\n\n      if (!self.ctx || typeof self.ctx.resume === 'undefined' || !Howler.usingWebAudio) {\n        return;\n      }\n\n      if (self.state === 'running' && self._suspendTimer) {\n        clearTimeout(self._suspendTimer);\n        self._suspendTimer = null;\n      } else if (self.state === 'suspended') {\n        self.ctx.resume().then(function() {\n          self.state = 'running';\n\n          // Emit to all Howls that the audio has resumed.\n          for (var i=0; i<self._howls.length; i++) {\n            self._howls[i]._emit('resume');\n          }\n        });\n\n        if (self._suspendTimer) {\n          clearTimeout(self._suspendTimer);\n          self._suspendTimer = null;\n        }\n      } else if (self.state === 'suspending') {\n        self._resumeAfterSuspend = true;\n      }\n\n      return self;\n    }\n  };\n\n  // Setup the global audio controller.\n  var Howler = new HowlerGlobal();\n\n  /** Group Methods **/\n  /***************************************************************************/\n\n  /**\n   * Create an audio group controller.\n   * @param {Object} o Passed in properties for this group.\n   */\n  var Howl = function(o) {\n    var self = this;\n\n    // Throw an error if no source is provided.\n    if (!o.src || o.src.length === 0) {\n      console.error('An array of source files must be passed with any new Howl.');\n      return;\n    }\n\n    self.init(o);\n  };\n  Howl.prototype = {\n    /**\n     * Initialize a new Howl group object.\n     * @param  {Object} o Passed in properties for this group.\n     * @return {Howl}\n     */\n    init: function(o) {\n      var self = this;\n\n      // If we don't have an AudioContext created yet, run the setup.\n      if (!Howler.ctx) {\n        setupAudioContext();\n      }\n\n      // Setup user-defined default properties.\n      self._autoplay = o.autoplay || false;\n      self._format = (typeof o.format !== 'string') ? o.format : [o.format];\n      self._html5 = o.html5 || false;\n      self._muted = o.mute || false;\n      self._loop = o.loop || false;\n      self._pool = o.pool || 5;\n      self._preload = (typeof o.preload === 'boolean') ? o.preload : true;\n      self._rate = o.rate || 1;\n      self._sprite = o.sprite || {};\n      self._src = (typeof o.src !== 'string') ? o.src : [o.src];\n      self._volume = o.volume !== undefined ? o.volume : 1;\n      self._xhrWithCredentials = o.xhrWithCredentials || false;\n\n      // Setup all other default properties.\n      self._duration = 0;\n      self._state = 'unloaded';\n      self._sounds = [];\n      self._endTimers = {};\n      self._queue = [];\n      self._playLock = false;\n\n      // Setup event listeners.\n      self._onend = o.onend ? [{fn: o.onend}] : [];\n      self._onfade = o.onfade ? [{fn: o.onfade}] : [];\n      self._onload = o.onload ? [{fn: o.onload}] : [];\n      self._onloaderror = o.onloaderror ? [{fn: o.onloaderror}] : [];\n      self._onplayerror = o.onplayerror ? [{fn: o.onplayerror}] : [];\n      self._onpause = o.onpause ? [{fn: o.onpause}] : [];\n      self._onplay = o.onplay ? [{fn: o.onplay}] : [];\n      self._onstop = o.onstop ? [{fn: o.onstop}] : [];\n      self._onmute = o.onmute ? [{fn: o.onmute}] : [];\n      self._onvolume = o.onvolume ? [{fn: o.onvolume}] : [];\n      self._onrate = o.onrate ? [{fn: o.onrate}] : [];\n      self._onseek = o.onseek ? [{fn: o.onseek}] : [];\n      self._onunlock = o.onunlock ? [{fn: o.onunlock}] : [];\n      self._onresume = [];\n\n      // Web Audio or HTML5 Audio?\n      self._webAudio = Howler.usingWebAudio && !self._html5;\n\n      // Automatically try to enable audio.\n      if (typeof Howler.ctx !== 'undefined' && Howler.ctx && Howler.autoUnlock) {\n        Howler._unlockAudio();\n      }\n\n      // Keep track of this Howl group in the global controller.\n      Howler._howls.push(self);\n\n      // If they selected autoplay, add a play event to the load queue.\n      if (self._autoplay) {\n        self._queue.push({\n          event: 'play',\n          action: function() {\n            self.play();\n          }\n        });\n      }\n\n      // Load the source file unless otherwise specified.\n      if (self._preload) {\n        self.load();\n      }\n\n      return self;\n    },\n\n    /**\n     * Load the audio file.\n     * @return {Howler}\n     */\n    load: function() {\n      var self = this;\n      var url = null;\n\n      // If no audio is available, quit immediately.\n      if (Howler.noAudio) {\n        self._emit('loaderror', null, 'No audio support.');\n        return;\n      }\n\n      // Make sure our source is in an array.\n      if (typeof self._src === 'string') {\n        self._src = [self._src];\n      }\n\n      // Loop through the sources and pick the first one that is compatible.\n      for (var i=0; i<self._src.length; i++) {\n        var ext, str;\n\n        if (self._format && self._format[i]) {\n          // If an extension was specified, use that instead.\n          ext = self._format[i];\n        } else {\n          // Make sure the source is a string.\n          str = self._src[i];\n          if (typeof str !== 'string') {\n            self._emit('loaderror', null, 'Non-string found in selected audio sources - ignoring.');\n            continue;\n          }\n\n          // Extract the file extension from the URL or base64 data URI.\n          ext = /^data:audio\\/([^;,]+);/i.exec(str);\n          if (!ext) {\n            ext = /\\.([^.]+)$/.exec(str.split('?', 1)[0]);\n          }\n\n          if (ext) {\n            ext = ext[1].toLowerCase();\n          }\n        }\n\n        // Log a warning if no extension was found.\n        if (!ext) {\n          console.warn('No file extension was found. Consider using the \"format\" property or specify an extension.');\n        }\n\n        // Check if this extension is available.\n        if (ext && Howler.codecs(ext)) {\n          url = self._src[i];\n          break;\n        }\n      }\n\n      if (!url) {\n        self._emit('loaderror', null, 'No codec support for selected audio sources.');\n        return;\n      }\n\n      self._src = url;\n      self._state = 'loading';\n\n      // If the hosting page is HTTPS and the source isn't,\n      // drop down to HTML5 Audio to avoid Mixed Content errors.\n      if (window.location.protocol === 'https:' && url.slice(0, 5) === 'http:') {\n        self._html5 = true;\n        self._webAudio = false;\n      }\n\n      // Create a new sound object and add it to the pool.\n      new Sound(self);\n\n      // Load and decode the audio data for playback.\n      if (self._webAudio) {\n        loadBuffer(self);\n      }\n\n      return self;\n    },\n\n    /**\n     * Play a sound or resume previous playback.\n     * @param  {String/Number} sprite   Sprite name for sprite playback or sound id to continue previous.\n     * @param  {Boolean} internal Internal Use: true prevents event firing.\n     * @return {Number}          Sound ID.\n     */\n    play: function(sprite, internal) {\n      var self = this;\n      var id = null;\n\n      // Determine if a sprite, sound id or nothing was passed\n      if (typeof sprite === 'number') {\n        id = sprite;\n        sprite = null;\n      } else if (typeof sprite === 'string' && self._state === 'loaded' && !self._sprite[sprite]) {\n        // If the passed sprite doesn't exist, do nothing.\n        return null;\n      } else if (typeof sprite === 'undefined') {\n        // Use the default sound sprite (plays the full audio length).\n        sprite = '__default';\n\n        // Check if there is a single paused sound that isn't ended. \n        // If there is, play that sound. If not, continue as usual.  \n        if (!self._playLock) {\n          var num = 0;\n          for (var i=0; i<self._sounds.length; i++) {\n            if (self._sounds[i]._paused && !self._sounds[i]._ended) {\n              num++;\n              id = self._sounds[i]._id;\n            }\n          }\n\n          if (num === 1) {\n            sprite = null;\n          } else {\n            id = null;\n          }\n        }\n      }\n\n      // Get the selected node, or get one from the pool.\n      var sound = id ? self._soundById(id) : self._inactiveSound();\n\n      // If the sound doesn't exist, do nothing.\n      if (!sound) {\n        return null;\n      }\n\n      // Select the sprite definition.\n      if (id && !sprite) {\n        sprite = sound._sprite || '__default';\n      }\n\n      // If the sound hasn't loaded, we must wait to get the audio's duration.\n      // We also need to wait to make sure we don't run into race conditions with\n      // the order of function calls.\n      if (self._state !== 'loaded') {\n        // Set the sprite value on this sound.\n        sound._sprite = sprite;\n\n        // Mark this sound as not ended in case another sound is played before this one loads.\n        sound._ended = false;\n\n        // Add the sound to the queue to be played on load.\n        var soundId = sound._id;\n        self._queue.push({\n          event: 'play',\n          action: function() {\n            self.play(soundId);\n          }\n        });\n\n        return soundId;\n      }\n\n      // Don't play the sound if an id was passed and it is already playing.\n      if (id && !sound._paused) {\n        // Trigger the play event, in order to keep iterating through queue.\n        if (!internal) {\n          self._loadQueue('play');\n        }\n\n        return sound._id;\n      }\n\n      // Make sure the AudioContext isn't suspended, and resume it if it is.\n      if (self._webAudio) {\n        Howler._autoResume();\n      }\n\n      // Determine how long to play for and where to start playing.\n      var seek = Math.max(0, sound._seek > 0 ? sound._seek : self._sprite[sprite][0] / 1000);\n      var duration = Math.max(0, ((self._sprite[sprite][0] + self._sprite[sprite][1]) / 1000) - seek);\n      var timeout = (duration * 1000) / Math.abs(sound._rate);\n      var start = self._sprite[sprite][0] / 1000;\n      var stop = (self._sprite[sprite][0] + self._sprite[sprite][1]) / 1000;\n      var loop = !!(sound._loop || self._sprite[sprite][2]);\n      sound._sprite = sprite;\n\n      // Mark the sound as ended instantly so that this async playback\n      // doesn't get grabbed by another call to play while this one waits to start.\n      sound._ended = false;\n\n      // Update the parameters of the sound.\n      var setParams = function() {\n        sound._paused = false;\n        sound._seek = seek;\n        sound._start = start;\n        sound._stop = stop;\n        sound._loop = loop;\n      };\n\n      // End the sound instantly if seek is at the end.\n      if (seek >= stop) {\n        self._ended(sound);\n        return;\n      }\n\n      // Begin the actual playback.\n      var node = sound._node;\n      if (self._webAudio) {\n        // Fire this when the sound is ready to play to begin Web Audio playback.\n        var playWebAudio = function() {\n          self._playLock = false;\n          setParams();\n          self._refreshBuffer(sound);\n\n          // Setup the playback params.\n          var vol = (sound._muted || self._muted) ? 0 : sound._volume;\n          node.gain.setValueAtTime(vol, Howler.ctx.currentTime);\n          sound._playStart = Howler.ctx.currentTime;\n\n          // Play the sound using the supported method.\n          if (typeof node.bufferSource.start === 'undefined') {\n            sound._loop ? node.bufferSource.noteGrainOn(0, seek, 86400) : node.bufferSource.noteGrainOn(0, seek, duration);\n          } else {\n            sound._loop ? node.bufferSource.start(0, seek, 86400) : node.bufferSource.start(0, seek, duration);\n          }\n\n          // Start a new timer if none is present.\n          if (timeout !== Infinity) {\n            self._endTimers[sound._id] = setTimeout(self._ended.bind(self, sound), timeout);\n          }\n\n          if (!internal) {\n            setTimeout(function() {\n              self._emit('play', sound._id);\n              self._loadQueue();\n            }, 0);\n          }\n        };\n\n        if (Howler.state === 'running') {\n          playWebAudio();\n        } else {\n          self._playLock = true;\n\n          // Wait for the audio context to resume before playing.\n          self.once('resume', playWebAudio);\n\n          // Cancel the end timer.\n          self._clearTimer(sound._id);\n        }\n      } else {\n        // Fire this when the sound is ready to play to begin HTML5 Audio playback.\n        var playHtml5 = function() {\n          node.currentTime = seek;\n          node.muted = sound._muted || self._muted || Howler._muted || node.muted;\n          node.volume = sound._volume * Howler.volume();\n          node.playbackRate = sound._rate;\n\n          // Some browsers will throw an error if this is called without user interaction.\n          try {\n            var play = node.play();\n\n            // Support older browsers that don't support promises, and thus don't have this issue.\n            if (play && typeof Promise !== 'undefined' && (play instanceof Promise || typeof play.then === 'function')) {\n              // Implements a lock to prevent DOMException: The play() request was interrupted by a call to pause().\n              self._playLock = true;\n\n              // Set param values immediately.\n              setParams();\n\n              // Releases the lock and executes queued actions.\n              play\n                .then(function() {\n                  self._playLock = false;\n                  node._unlocked = true;\n                  if (!internal) {\n                    self._emit('play', sound._id);\n                    self._loadQueue();\n                  }\n                })\n                .catch(function() {\n                  self._playLock = false;\n                  self._emit('playerror', sound._id, 'Playback was unable to start. This is most commonly an issue ' +\n                    'on mobile devices and Chrome where playback was not within a user interaction.');\n\n                  // Reset the ended and paused values.\n                  sound._ended = true;\n                  sound._paused = true;\n                });\n            } else if (!internal) {\n              self._playLock = false;\n              setParams();\n              self._emit('play', sound._id);\n              self._loadQueue();\n            }\n\n            // Setting rate before playing won't work in IE, so we set it again here.\n            node.playbackRate = sound._rate;\n\n            // If the node is still paused, then we can assume there was a playback issue.\n            if (node.paused) {\n              self._emit('playerror', sound._id, 'Playback was unable to start. This is most commonly an issue ' +\n                'on mobile devices and Chrome where playback was not within a user interaction.');\n              return;\n            }\n\n            // Setup the end timer on sprites or listen for the ended event.\n            if (sprite !== '__default' || sound._loop) {\n              self._endTimers[sound._id] = setTimeout(self._ended.bind(self, sound), timeout);\n            } else {\n              self._endTimers[sound._id] = function() {\n                // Fire ended on this audio node.\n                self._ended(sound);\n\n                // Clear this listener.\n                node.removeEventListener('ended', self._endTimers[sound._id], false);\n              };\n              node.addEventListener('ended', self._endTimers[sound._id], false);\n            }\n          } catch (err) {\n            self._emit('playerror', sound._id, err);\n          }\n        };\n\n        // Play immediately if ready, or wait for the 'canplaythrough'e vent.\n        var loadedNoReadyState = (window && window.ejecta) || (!node.readyState && Howler._navigator.isCocoonJS);\n        if (node.readyState >= 3 || loadedNoReadyState) {\n          playHtml5();\n        } else {\n          self._playLock = true;\n\n          var listener = function() {\n            // Begin playback.\n            playHtml5();\n\n            // Clear this listener.\n            node.removeEventListener(Howler._canPlayEvent, listener, false);\n          };\n          node.addEventListener(Howler._canPlayEvent, listener, false);\n\n          // Cancel the end timer.\n          self._clearTimer(sound._id);\n        }\n      }\n\n      return sound._id;\n    },\n\n    /**\n     * Pause playback and save current position.\n     * @param  {Number} id The sound ID (empty to pause all in group).\n     * @return {Howl}\n     */\n    pause: function(id) {\n      var self = this;\n\n      // If the sound hasn't loaded or a play() promise is pending, add it to the load queue to pause when capable.\n      if (self._state !== 'loaded' || self._playLock) {\n        self._queue.push({\n          event: 'pause',\n          action: function() {\n            self.pause(id);\n          }\n        });\n\n        return self;\n      }\n\n      // If no id is passed, get all ID's to be paused.\n      var ids = self._getSoundIds(id);\n\n      for (var i=0; i<ids.length; i++) {\n        // Clear the end timer.\n        self._clearTimer(ids[i]);\n\n        // Get the sound.\n        var sound = self._soundById(ids[i]);\n\n        if (sound && !sound._paused) {\n          // Reset the seek position.\n          sound._seek = self.seek(ids[i]);\n          sound._rateSeek = 0;\n          sound._paused = true;\n\n          // Stop currently running fades.\n          self._stopFade(ids[i]);\n\n          if (sound._node) {\n            if (self._webAudio) {\n              // Make sure the sound has been created.\n              if (!sound._node.bufferSource) {\n                continue;\n              }\n\n              if (typeof sound._node.bufferSource.stop === 'undefined') {\n                sound._node.bufferSource.noteOff(0);\n              } else {\n                sound._node.bufferSource.stop(0);\n              }\n\n              // Clean up the buffer source.\n              self._cleanBuffer(sound._node);\n            } else if (!isNaN(sound._node.duration) || sound._node.duration === Infinity) {\n              sound._node.pause();\n            }\n          }\n        }\n\n        // Fire the pause event, unless `true` is passed as the 2nd argument.\n        if (!arguments[1]) {\n          self._emit('pause', sound ? sound._id : null);\n        }\n      }\n\n      return self;\n    },\n\n    /**\n     * Stop playback and reset to start.\n     * @param  {Number} id The sound ID (empty to stop all in group).\n     * @param  {Boolean} internal Internal Use: true prevents event firing.\n     * @return {Howl}\n     */\n    stop: function(id, internal) {\n      var self = this;\n\n      // If the sound hasn't loaded, add it to the load queue to stop when capable.\n      if (self._state !== 'loaded' || self._playLock) {\n        self._queue.push({\n          event: 'stop',\n          action: function() {\n            self.stop(id);\n          }\n        });\n\n        return self;\n      }\n\n      // If no id is passed, get all ID's to be stopped.\n      var ids = self._getSoundIds(id);\n\n      for (var i=0; i<ids.length; i++) {\n        // Clear the end timer.\n        self._clearTimer(ids[i]);\n\n        // Get the sound.\n        var sound = self._soundById(ids[i]);\n\n        if (sound) {\n          // Reset the seek position.\n          sound._seek = sound._start || 0;\n          sound._rateSeek = 0;\n          sound._paused = true;\n          sound._ended = true;\n\n          // Stop currently running fades.\n          self._stopFade(ids[i]);\n\n          if (sound._node) {\n            if (self._webAudio) {\n              // Make sure the sound's AudioBufferSourceNode has been created.\n              if (sound._node.bufferSource) {\n                if (typeof sound._node.bufferSource.stop === 'undefined') {\n                  sound._node.bufferSource.noteOff(0);\n                } else {\n                  sound._node.bufferSource.stop(0);\n                }\n\n                // Clean up the buffer source.\n                self._cleanBuffer(sound._node);\n              }\n            } else if (!isNaN(sound._node.duration) || sound._node.duration === Infinity) {\n              sound._node.currentTime = sound._start || 0;\n              sound._node.pause();\n            }\n          }\n\n          if (!internal) {\n            self._emit('stop', sound._id);\n          }\n        }\n      }\n\n      return self;\n    },\n\n    /**\n     * Mute/unmute a single sound or all sounds in this Howl group.\n     * @param  {Boolean} muted Set to true to mute and false to unmute.\n     * @param  {Number} id    The sound ID to update (omit to mute/unmute all).\n     * @return {Howl}\n     */\n    mute: function(muted, id) {\n      var self = this;\n\n      // If the sound hasn't loaded, add it to the load queue to mute when capable.\n      if (self._state !== 'loaded'|| self._playLock) {\n        self._queue.push({\n          event: 'mute',\n          action: function() {\n            self.mute(muted, id);\n          }\n        });\n\n        return self;\n      }\n\n      // If applying mute/unmute to all sounds, update the group's value.\n      if (typeof id === 'undefined') {\n        if (typeof muted === 'boolean') {\n          self._muted = muted;\n        } else {\n          return self._muted;\n        }\n      }\n\n      // If no id is passed, get all ID's to be muted.\n      var ids = self._getSoundIds(id);\n\n      for (var i=0; i<ids.length; i++) {\n        // Get the sound.\n        var sound = self._soundById(ids[i]);\n\n        if (sound) {\n          sound._muted = muted;\n\n          // Cancel active fade and set the volume to the end value.\n          if (sound._interval) {\n            self._stopFade(sound._id);\n          }\n\n          if (self._webAudio && sound._node) {\n            sound._node.gain.setValueAtTime(muted ? 0 : sound._volume, Howler.ctx.currentTime);\n          } else if (sound._node) {\n            sound._node.muted = Howler._muted ? true : muted;\n          }\n\n          self._emit('mute', sound._id);\n        }\n      }\n\n      return self;\n    },\n\n    /**\n     * Get/set the volume of this sound or of the Howl group. This method can optionally take 0, 1 or 2 arguments.\n     *   volume() -> Returns the group's volume value.\n     *   volume(id) -> Returns the sound id's current volume.\n     *   volume(vol) -> Sets the volume of all sounds in this Howl group.\n     *   volume(vol, id) -> Sets the volume of passed sound id.\n     * @return {Howl/Number} Returns self or current volume.\n     */\n    volume: function() {\n      var self = this;\n      var args = arguments;\n      var vol, id;\n\n      // Determine the values based on arguments.\n      if (args.length === 0) {\n        // Return the value of the groups' volume.\n        return self._volume;\n      } else if (args.length === 1 || args.length === 2 && typeof args[1] === 'undefined') {\n        // First check if this is an ID, and if not, assume it is a new volume.\n        var ids = self._getSoundIds();\n        var index = ids.indexOf(args[0]);\n        if (index >= 0) {\n          id = parseInt(args[0], 10);\n        } else {\n          vol = parseFloat(args[0]);\n        }\n      } else if (args.length >= 2) {\n        vol = parseFloat(args[0]);\n        id = parseInt(args[1], 10);\n      }\n\n      // Update the volume or return the current volume.\n      var sound;\n      if (typeof vol !== 'undefined' && vol >= 0 && vol <= 1) {\n        // If the sound hasn't loaded, add it to the load queue to change volume when capable.\n        if (self._state !== 'loaded'|| self._playLock) {\n          self._queue.push({\n            event: 'volume',\n            action: function() {\n              self.volume.apply(self, args);\n            }\n          });\n\n          return self;\n        }\n\n        // Set the group volume.\n        if (typeof id === 'undefined') {\n          self._volume = vol;\n        }\n\n        // Update one or all volumes.\n        id = self._getSoundIds(id);\n        for (var i=0; i<id.length; i++) {\n          // Get the sound.\n          sound = self._soundById(id[i]);\n\n          if (sound) {\n            sound._volume = vol;\n\n            // Stop currently running fades.\n            if (!args[2]) {\n              self._stopFade(id[i]);\n            }\n\n            if (self._webAudio && sound._node && !sound._muted) {\n              sound._node.gain.setValueAtTime(vol, Howler.ctx.currentTime);\n            } else if (sound._node && !sound._muted) {\n              sound._node.volume = vol * Howler.volume();\n            }\n\n            self._emit('volume', sound._id);\n          }\n        }\n      } else {\n        sound = id ? self._soundById(id) : self._sounds[0];\n        return sound ? sound._volume : 0;\n      }\n\n      return self;\n    },\n\n    /**\n     * Fade a currently playing sound between two volumes (if no id is passsed, all sounds will fade).\n     * @param  {Number} from The value to fade from (0.0 to 1.0).\n     * @param  {Number} to   The volume to fade to (0.0 to 1.0).\n     * @param  {Number} len  Time in milliseconds to fade.\n     * @param  {Number} id   The sound id (omit to fade all sounds).\n     * @return {Howl}\n     */\n    fade: function(from, to, len, id) {\n      var self = this;\n\n      // If the sound hasn't loaded, add it to the load queue to fade when capable.\n      if (self._state !== 'loaded' || self._playLock) {\n        self._queue.push({\n          event: 'fade',\n          action: function() {\n            self.fade(from, to, len, id);\n          }\n        });\n\n        return self;\n      }\n\n      // Make sure the to/from/len values are numbers.\n      from = parseFloat(from);\n      to = parseFloat(to);\n      len = parseFloat(len);\n\n      // Set the volume to the start position.\n      self.volume(from, id);\n\n      // Fade the volume of one or all sounds.\n      var ids = self._getSoundIds(id);\n      for (var i=0; i<ids.length; i++) {\n        // Get the sound.\n        var sound = self._soundById(ids[i]);\n\n        // Create a linear fade or fall back to timeouts with HTML5 Audio.\n        if (sound) {\n          // Stop the previous fade if no sprite is being used (otherwise, volume handles this).\n          if (!id) {\n            self._stopFade(ids[i]);\n          }\n\n          // If we are using Web Audio, let the native methods do the actual fade.\n          if (self._webAudio && !sound._muted) {\n            var currentTime = Howler.ctx.currentTime;\n            var end = currentTime + (len / 1000);\n            sound._volume = from;\n            sound._node.gain.setValueAtTime(from, currentTime);\n            sound._node.gain.linearRampToValueAtTime(to, end);\n          }\n\n          self._startFadeInterval(sound, from, to, len, ids[i], typeof id === 'undefined');\n        }\n      }\n\n      return self;\n    },\n\n    /**\n     * Starts the internal interval to fade a sound.\n     * @param  {Object} sound Reference to sound to fade.\n     * @param  {Number} from The value to fade from (0.0 to 1.0).\n     * @param  {Number} to   The volume to fade to (0.0 to 1.0).\n     * @param  {Number} len  Time in milliseconds to fade.\n     * @param  {Number} id   The sound id to fade.\n     * @param  {Boolean} isGroup   If true, set the volume on the group.\n     */\n    _startFadeInterval: function(sound, from, to, len, id, isGroup) {\n      var self = this;\n      var vol = from;\n      var diff = to - from;\n      var steps = Math.abs(diff / 0.01);\n      var stepLen = Math.max(4, (steps > 0) ? len / steps : len);\n      var lastTick = Date.now();\n\n      // Store the value being faded to.\n      sound._fadeTo = to;\n\n      // Update the volume value on each interval tick.\n      sound._interval = setInterval(function() {\n        // Update the volume based on the time since the last tick.\n        var tick = (Date.now() - lastTick) / len;\n        lastTick = Date.now();\n        vol += diff * tick;\n\n        // Make sure the volume is in the right bounds.\n        vol = Math.max(0, vol);\n        vol = Math.min(1, vol);\n\n        // Round to within 2 decimal points.\n        vol = Math.round(vol * 100) / 100;\n\n        // Change the volume.\n        if (self._webAudio) {\n          sound._volume = vol;\n        } else {\n          self.volume(vol, sound._id, true);\n        }\n\n        // Set the group's volume.\n        if (isGroup) {\n          self._volume = vol;\n        }\n\n        // When the fade is complete, stop it and fire event.\n        if ((to < from && vol <= to) || (to > from && vol >= to)) {\n          clearInterval(sound._interval);\n          sound._interval = null;\n          sound._fadeTo = null;\n          self.volume(to, sound._id);\n          self._emit('fade', sound._id);\n        }\n      }, stepLen);\n    },\n\n    /**\n     * Internal method that stops the currently playing fade when\n     * a new fade starts, volume is changed or the sound is stopped.\n     * @param  {Number} id The sound id.\n     * @return {Howl}\n     */\n    _stopFade: function(id) {\n      var self = this;\n      var sound = self._soundById(id);\n\n      if (sound && sound._interval) {\n        if (self._webAudio) {\n          sound._node.gain.cancelScheduledValues(Howler.ctx.currentTime);\n        }\n\n        clearInterval(sound._interval);\n        sound._interval = null;\n        self.volume(sound._fadeTo, id);\n        sound._fadeTo = null;\n        self._emit('fade', id);\n      }\n\n      return self;\n    },\n\n    /**\n     * Get/set the loop parameter on a sound. This method can optionally take 0, 1 or 2 arguments.\n     *   loop() -> Returns the group's loop value.\n     *   loop(id) -> Returns the sound id's loop value.\n     *   loop(loop) -> Sets the loop value for all sounds in this Howl group.\n     *   loop(loop, id) -> Sets the loop value of passed sound id.\n     * @return {Howl/Boolean} Returns self or current loop value.\n     */\n    loop: function() {\n      var self = this;\n      var args = arguments;\n      var loop, id, sound;\n\n      // Determine the values for loop and id.\n      if (args.length === 0) {\n        // Return the grou's loop value.\n        return self._loop;\n      } else if (args.length === 1) {\n        if (typeof args[0] === 'boolean') {\n          loop = args[0];\n          self._loop = loop;\n        } else {\n          // Return this sound's loop value.\n          sound = self._soundById(parseInt(args[0], 10));\n          return sound ? sound._loop : false;\n        }\n      } else if (args.length === 2) {\n        loop = args[0];\n        id = parseInt(args[1], 10);\n      }\n\n      // If no id is passed, get all ID's to be looped.\n      var ids = self._getSoundIds(id);\n      for (var i=0; i<ids.length; i++) {\n        sound = self._soundById(ids[i]);\n\n        if (sound) {\n          sound._loop = loop;\n          if (self._webAudio && sound._node && sound._node.bufferSource) {\n            sound._node.bufferSource.loop = loop;\n            if (loop) {\n              sound._node.bufferSource.loopStart = sound._start || 0;\n              sound._node.bufferSource.loopEnd = sound._stop;\n            }\n          }\n        }\n      }\n\n      return self;\n    },\n\n    /**\n     * Get/set the playback rate of a sound. This method can optionally take 0, 1 or 2 arguments.\n     *   rate() -> Returns the first sound node's current playback rate.\n     *   rate(id) -> Returns the sound id's current playback rate.\n     *   rate(rate) -> Sets the playback rate of all sounds in this Howl group.\n     *   rate(rate, id) -> Sets the playback rate of passed sound id.\n     * @return {Howl/Number} Returns self or the current playback rate.\n     */\n    rate: function() {\n      var self = this;\n      var args = arguments;\n      var rate, id;\n\n      // Determine the values based on arguments.\n      if (args.length === 0) {\n        // We will simply return the current rate of the first node.\n        id = self._sounds[0]._id;\n      } else if (args.length === 1) {\n        // First check if this is an ID, and if not, assume it is a new rate value.\n        var ids = self._getSoundIds();\n        var index = ids.indexOf(args[0]);\n        if (index >= 0) {\n          id = parseInt(args[0], 10);\n        } else {\n          rate = parseFloat(args[0]);\n        }\n      } else if (args.length === 2) {\n        rate = parseFloat(args[0]);\n        id = parseInt(args[1], 10);\n      }\n\n      // Update the playback rate or return the current value.\n      var sound;\n      if (typeof rate === 'number') {\n        // If the sound hasn't loaded, add it to the load queue to change playback rate when capable.\n        if (self._state !== 'loaded' || self._playLock) {\n          self._queue.push({\n            event: 'rate',\n            action: function() {\n              self.rate.apply(self, args);\n            }\n          });\n\n          return self;\n        }\n\n        // Set the group rate.\n        if (typeof id === 'undefined') {\n          self._rate = rate;\n        }\n\n        // Update one or all volumes.\n        id = self._getSoundIds(id);\n        for (var i=0; i<id.length; i++) {\n          // Get the sound.\n          sound = self._soundById(id[i]);\n\n          if (sound) {\n            // Keep track of our position when the rate changed and update the playback\n            // start position so we can properly adjust the seek position for time elapsed.\n            if (self.playing(id[i])) {\n              sound._rateSeek = self.seek(id[i]);\n              sound._playStart = self._webAudio ? Howler.ctx.currentTime : sound._playStart;\n            }\n            sound._rate = rate;\n\n            // Change the playback rate.\n            if (self._webAudio && sound._node && sound._node.bufferSource) {\n              sound._node.bufferSource.playbackRate.setValueAtTime(rate, Howler.ctx.currentTime);\n            } else if (sound._node) {\n              sound._node.playbackRate = rate;\n            }\n\n            // Reset the timers.\n            var seek = self.seek(id[i]);\n            var duration = ((self._sprite[sound._sprite][0] + self._sprite[sound._sprite][1]) / 1000) - seek;\n            var timeout = (duration * 1000) / Math.abs(sound._rate);\n\n            // Start a new end timer if sound is already playing.\n            if (self._endTimers[id[i]] || !sound._paused) {\n              self._clearTimer(id[i]);\n              self._endTimers[id[i]] = setTimeout(self._ended.bind(self, sound), timeout);\n            }\n\n            self._emit('rate', sound._id);\n          }\n        }\n      } else {\n        sound = self._soundById(id);\n        return sound ? sound._rate : self._rate;\n      }\n\n      return self;\n    },\n\n    /**\n     * Get/set the seek position of a sound. This method can optionally take 0, 1 or 2 arguments.\n     *   seek() -> Returns the first sound node's current seek position.\n     *   seek(id) -> Returns the sound id's current seek position.\n     *   seek(seek) -> Sets the seek position of the first sound node.\n     *   seek(seek, id) -> Sets the seek position of passed sound id.\n     * @return {Howl/Number} Returns self or the current seek position.\n     */\n    seek: function() {\n      var self = this;\n      var args = arguments;\n      var seek, id;\n\n      // Determine the values based on arguments.\n      if (args.length === 0) {\n        // We will simply return the current position of the first node.\n        id = self._sounds[0]._id;\n      } else if (args.length === 1) {\n        // First check if this is an ID, and if not, assume it is a new seek position.\n        var ids = self._getSoundIds();\n        var index = ids.indexOf(args[0]);\n        if (index >= 0) {\n          id = parseInt(args[0], 10);\n        } else if (self._sounds.length) {\n          id = self._sounds[0]._id;\n          seek = parseFloat(args[0]);\n        }\n      } else if (args.length === 2) {\n        seek = parseFloat(args[0]);\n        id = parseInt(args[1], 10);\n      }\n\n      // If there is no ID, bail out.\n      if (typeof id === 'undefined') {\n        return self;\n      }\n\n      // If the sound hasn't loaded, add it to the load queue to seek when capable.\n      if (self._state !== 'loaded' || self._playLock) {\n        self._queue.push({\n          event: 'seek',\n          action: function() {\n            self.seek.apply(self, args);\n          }\n        });\n\n        return self;\n      }\n\n      // Get the sound.\n      var sound = self._soundById(id);\n\n      if (sound) {\n        if (typeof seek === 'number' && seek >= 0) {\n          // Pause the sound and update position for restarting playback.\n          var playing = self.playing(id);\n          if (playing) {\n            self.pause(id, true);\n          }\n\n          // Move the position of the track and cancel timer.\n          sound._seek = seek;\n          sound._ended = false;\n          self._clearTimer(id);\n\n          // Update the seek position for HTML5 Audio.\n          if (!self._webAudio && sound._node && !isNaN(sound._node.duration)) {\n            sound._node.currentTime = seek;\n          }\n\n          // Seek and emit when ready.\n          var seekAndEmit = function() {\n            self._emit('seek', id);\n\n            // Restart the playback if the sound was playing.\n            if (playing) {\n              self.play(id, true);\n            }\n          };\n\n          // Wait for the play lock to be unset before emitting (HTML5 Audio).\n          if (playing && !self._webAudio) {\n            var emitSeek = function() {\n              if (!self._playLock) {\n                seekAndEmit();\n              } else {\n                setTimeout(emitSeek, 0);\n              }\n            };\n            setTimeout(emitSeek, 0);\n          } else {\n            seekAndEmit();\n          }\n        } else {\n          if (self._webAudio) {\n            var realTime = self.playing(id) ? Howler.ctx.currentTime - sound._playStart : 0;\n            var rateSeek = sound._rateSeek ? sound._rateSeek - sound._seek : 0;\n            return sound._seek + (rateSeek + realTime * Math.abs(sound._rate));\n          } else {\n            return sound._node.currentTime;\n          }\n        }\n      }\n\n      return self;\n    },\n\n    /**\n     * Check if a specific sound is currently playing or not (if id is provided), or check if at least one of the sounds in the group is playing or not.\n     * @param  {Number}  id The sound id to check. If none is passed, the whole sound group is checked.\n     * @return {Boolean} True if playing and false if not.\n     */\n    playing: function(id) {\n      var self = this;\n\n      // Check the passed sound ID (if any).\n      if (typeof id === 'number') {\n        var sound = self._soundById(id);\n        return sound ? !sound._paused : false;\n      }\n\n      // Otherwise, loop through all sounds and check if any are playing.\n      for (var i=0; i<self._sounds.length; i++) {\n        if (!self._sounds[i]._paused) {\n          return true;\n        }\n      }\n\n      return false;\n    },\n\n    /**\n     * Get the duration of this sound. Passing a sound id will return the sprite duration.\n     * @param  {Number} id The sound id to check. If none is passed, return full source duration.\n     * @return {Number} Audio duration in seconds.\n     */\n    duration: function(id) {\n      var self = this;\n      var duration = self._duration;\n\n      // If we pass an ID, get the sound and return the sprite length.\n      var sound = self._soundById(id);\n      if (sound) {\n        duration = self._sprite[sound._sprite][1] / 1000;\n      }\n\n      return duration;\n    },\n\n    /**\n     * Returns the current loaded state of this Howl.\n     * @return {String} 'unloaded', 'loading', 'loaded'\n     */\n    state: function() {\n      return this._state;\n    },\n\n    /**\n     * Unload and destroy the current Howl object.\n     * This will immediately stop all sound instances attached to this group.\n     */\n    unload: function() {\n      var self = this;\n\n      // Stop playing any active sounds.\n      var sounds = self._sounds;\n      for (var i=0; i<sounds.length; i++) {\n        // Stop the sound if it is currently playing.\n        if (!sounds[i]._paused) {\n          self.stop(sounds[i]._id);\n        }\n\n        // Remove the source or disconnect.\n        if (!self._webAudio) {\n          // Set the source to 0-second silence to stop any downloading (except in IE).\n          var checkIE = /MSIE |Trident\\//.test(Howler._navigator && Howler._navigator.userAgent);\n          if (!checkIE) {\n            sounds[i]._node.src = 'data:audio/wav;base64,UklGRigAAABXQVZFZm10IBIAAAABAAEARKwAAIhYAQACABAAAABkYXRhAgAAAAEA';\n          }\n\n          // Remove any event listeners.\n          sounds[i]._node.removeEventListener('error', sounds[i]._errorFn, false);\n          sounds[i]._node.removeEventListener(Howler._canPlayEvent, sounds[i]._loadFn, false);\n\n          // Release the Audio object back to the pool.\n          Howler._releaseHtml5Audio(sounds[i]._node);\n        }\n\n        // Empty out all of the nodes.\n        delete sounds[i]._node;\n\n        // Make sure all timers are cleared out.\n        self._clearTimer(sounds[i]._id);\n      }\n\n      // Remove the references in the global Howler object.\n      var index = Howler._howls.indexOf(self);\n      if (index >= 0) {\n        Howler._howls.splice(index, 1);\n      }\n\n      // Delete this sound from the cache (if no other Howl is using it).\n      var remCache = true;\n      for (i=0; i<Howler._howls.length; i++) {\n        if (Howler._howls[i]._src === self._src || self._src.indexOf(Howler._howls[i]._src) >= 0) {\n          remCache = false;\n          break;\n        }\n      }\n\n      if (cache && remCache) {\n        delete cache[self._src];\n      }\n\n      // Clear global errors.\n      Howler.noAudio = false;\n\n      // Clear out `self`.\n      self._state = 'unloaded';\n      self._sounds = [];\n      self = null;\n\n      return null;\n    },\n\n    /**\n     * Listen to a custom event.\n     * @param  {String}   event Event name.\n     * @param  {Function} fn    Listener to call.\n     * @param  {Number}   id    (optional) Only listen to events for this sound.\n     * @param  {Number}   once  (INTERNAL) Marks event to fire only once.\n     * @return {Howl}\n     */\n    on: function(event, fn, id, once) {\n      var self = this;\n      var events = self['_on' + event];\n\n      if (typeof fn === 'function') {\n        events.push(once ? {id: id, fn: fn, once: once} : {id: id, fn: fn});\n      }\n\n      return self;\n    },\n\n    /**\n     * Remove a custom event. Call without parameters to remove all events.\n     * @param  {String}   event Event name.\n     * @param  {Function} fn    Listener to remove. Leave empty to remove all.\n     * @param  {Number}   id    (optional) Only remove events for this sound.\n     * @return {Howl}\n     */\n    off: function(event, fn, id) {\n      var self = this;\n      var events = self['_on' + event];\n      var i = 0;\n\n      // Allow passing just an event and ID.\n      if (typeof fn === 'number') {\n        id = fn;\n        fn = null;\n      }\n\n      if (fn || id) {\n        // Loop through event store and remove the passed function.\n        for (i=0; i<events.length; i++) {\n          var isId = (id === events[i].id);\n          if (fn === events[i].fn && isId || !fn && isId) {\n            events.splice(i, 1);\n            break;\n          }\n        }\n      } else if (event) {\n        // Clear out all events of this type.\n        self['_on' + event] = [];\n      } else {\n        // Clear out all events of every type.\n        var keys = Object.keys(self);\n        for (i=0; i<keys.length; i++) {\n          if ((keys[i].indexOf('_on') === 0) && Array.isArray(self[keys[i]])) {\n            self[keys[i]] = [];\n          }\n        }\n      }\n\n      return self;\n    },\n\n    /**\n     * Listen to a custom event and remove it once fired.\n     * @param  {String}   event Event name.\n     * @param  {Function} fn    Listener to call.\n     * @param  {Number}   id    (optional) Only listen to events for this sound.\n     * @return {Howl}\n     */\n    once: function(event, fn, id) {\n      var self = this;\n\n      // Setup the event listener.\n      self.on(event, fn, id, 1);\n\n      return self;\n    },\n\n    /**\n     * Emit all events of a specific type and pass the sound id.\n     * @param  {String} event Event name.\n     * @param  {Number} id    Sound ID.\n     * @param  {Number} msg   Message to go with event.\n     * @return {Howl}\n     */\n    _emit: function(event, id, msg) {\n      var self = this;\n      var events = self['_on' + event];\n\n      // Loop through event store and fire all functions.\n      for (var i=events.length-1; i>=0; i--) {\n        // Only fire the listener if the correct ID is used.\n        if (!events[i].id || events[i].id === id || event === 'load') {\n          setTimeout(function(fn) {\n            fn.call(this, id, msg);\n          }.bind(self, events[i].fn), 0);\n\n          // If this event was setup with `once`, remove it.\n          if (events[i].once) {\n            self.off(event, events[i].fn, events[i].id);\n          }\n        }\n      }\n\n      // Pass the event type into load queue so that it can continue stepping.\n      self._loadQueue(event);\n\n      return self;\n    },\n\n    /**\n     * Queue of actions initiated before the sound has loaded.\n     * These will be called in sequence, with the next only firing\n     * after the previous has finished executing (even if async like play).\n     * @return {Howl}\n     */\n    _loadQueue: function(event) {\n      var self = this;\n\n      if (self._queue.length > 0) {\n        var task = self._queue[0];\n\n        // Remove this task if a matching event was passed.\n        if (task.event === event) {\n          self._queue.shift();\n          self._loadQueue();\n        }\n\n        // Run the task if no event type is passed.\n        if (!event) {\n          task.action();\n        }\n      }\n\n      return self;\n    },\n\n    /**\n     * Fired when playback ends at the end of the duration.\n     * @param  {Sound} sound The sound object to work with.\n     * @return {Howl}\n     */\n    _ended: function(sound) {\n      var self = this;\n      var sprite = sound._sprite;\n\n      // If we are using IE and there was network latency we may be clipping\n      // audio before it completes playing. Lets check the node to make sure it\n      // believes it has completed, before ending the playback.\n      if (!self._webAudio && sound._node && !sound._node.paused && !sound._node.ended && sound._node.currentTime < sound._stop) {\n        setTimeout(self._ended.bind(self, sound), 100);\n        return self;\n      }\n\n      // Should this sound loop?\n      var loop = !!(sound._loop || self._sprite[sprite][2]);\n\n      // Fire the ended event.\n      self._emit('end', sound._id);\n\n      // Restart the playback for HTML5 Audio loop.\n      if (!self._webAudio && loop) {\n        self.stop(sound._id, true).play(sound._id);\n      }\n\n      // Restart this timer if on a Web Audio loop.\n      if (self._webAudio && loop) {\n        self._emit('play', sound._id);\n        sound._seek = sound._start || 0;\n        sound._rateSeek = 0;\n        sound._playStart = Howler.ctx.currentTime;\n\n        var timeout = ((sound._stop - sound._start) * 1000) / Math.abs(sound._rate);\n        self._endTimers[sound._id] = setTimeout(self._ended.bind(self, sound), timeout);\n      }\n\n      // Mark the node as paused.\n      if (self._webAudio && !loop) {\n        sound._paused = true;\n        sound._ended = true;\n        sound._seek = sound._start || 0;\n        sound._rateSeek = 0;\n        self._clearTimer(sound._id);\n\n        // Clean up the buffer source.\n        self._cleanBuffer(sound._node);\n\n        // Attempt to auto-suspend AudioContext if no sounds are still playing.\n        Howler._autoSuspend();\n      }\n\n      // When using a sprite, end the track.\n      if (!self._webAudio && !loop) {\n        self.stop(sound._id, true);\n      }\n\n      return self;\n    },\n\n    /**\n     * Clear the end timer for a sound playback.\n     * @param  {Number} id The sound ID.\n     * @return {Howl}\n     */\n    _clearTimer: function(id) {\n      var self = this;\n\n      if (self._endTimers[id]) {\n        // Clear the timeout or remove the ended listener.\n        if (typeof self._endTimers[id] !== 'function') {\n          clearTimeout(self._endTimers[id]);\n        } else {\n          var sound = self._soundById(id);\n          if (sound && sound._node) {\n            sound._node.removeEventListener('ended', self._endTimers[id], false);\n          }\n        }\n\n        delete self._endTimers[id];\n      }\n\n      return self;\n    },\n\n    /**\n     * Return the sound identified by this ID, or return null.\n     * @param  {Number} id Sound ID\n     * @return {Object}    Sound object or null.\n     */\n    _soundById: function(id) {\n      var self = this;\n\n      // Loop through all sounds and find the one with this ID.\n      for (var i=0; i<self._sounds.length; i++) {\n        if (id === self._sounds[i]._id) {\n          return self._sounds[i];\n        }\n      }\n\n      return null;\n    },\n\n    /**\n     * Return an inactive sound from the pool or create a new one.\n     * @return {Sound} Sound playback object.\n     */\n    _inactiveSound: function() {\n      var self = this;\n\n      self._drain();\n\n      // Find the first inactive node to recycle.\n      for (var i=0; i<self._sounds.length; i++) {\n        if (self._sounds[i]._ended) {\n          return self._sounds[i].reset();\n        }\n      }\n\n      // If no inactive node was found, create a new one.\n      return new Sound(self);\n    },\n\n    /**\n     * Drain excess inactive sounds from the pool.\n     */\n    _drain: function() {\n      var self = this;\n      var limit = self._pool;\n      var cnt = 0;\n      var i = 0;\n\n      // If there are less sounds than the max pool size, we are done.\n      if (self._sounds.length < limit) {\n        return;\n      }\n\n      // Count the number of inactive sounds.\n      for (i=0; i<self._sounds.length; i++) {\n        if (self._sounds[i]._ended) {\n          cnt++;\n        }\n      }\n\n      // Remove excess inactive sounds, going in reverse order.\n      for (i=self._sounds.length - 1; i>=0; i--) {\n        if (cnt <= limit) {\n          return;\n        }\n\n        if (self._sounds[i]._ended) {\n          // Disconnect the audio source when using Web Audio.\n          if (self._webAudio && self._sounds[i]._node) {\n            self._sounds[i]._node.disconnect(0);\n          }\n\n          // Remove sounds until we have the pool size.\n          self._sounds.splice(i, 1);\n          cnt--;\n        }\n      }\n    },\n\n    /**\n     * Get all ID's from the sounds pool.\n     * @param  {Number} id Only return one ID if one is passed.\n     * @return {Array}    Array of IDs.\n     */\n    _getSoundIds: function(id) {\n      var self = this;\n\n      if (typeof id === 'undefined') {\n        var ids = [];\n        for (var i=0; i<self._sounds.length; i++) {\n          ids.push(self._sounds[i]._id);\n        }\n\n        return ids;\n      } else {\n        return [id];\n      }\n    },\n\n    /**\n     * Load the sound back into the buffer source.\n     * @param  {Sound} sound The sound object to work with.\n     * @return {Howl}\n     */\n    _refreshBuffer: function(sound) {\n      var self = this;\n\n      // Setup the buffer source for playback.\n      sound._node.bufferSource = Howler.ctx.createBufferSource();\n      sound._node.bufferSource.buffer = cache[self._src];\n\n      // Connect to the correct node.\n      if (sound._panner) {\n        sound._node.bufferSource.connect(sound._panner);\n      } else {\n        sound._node.bufferSource.connect(sound._node);\n      }\n\n      // Setup looping and playback rate.\n      sound._node.bufferSource.loop = sound._loop;\n      if (sound._loop) {\n        sound._node.bufferSource.loopStart = sound._start || 0;\n        sound._node.bufferSource.loopEnd = sound._stop || 0;\n      }\n      sound._node.bufferSource.playbackRate.setValueAtTime(sound._rate, Howler.ctx.currentTime);\n\n      return self;\n    },\n\n    /**\n     * Prevent memory leaks by cleaning up the buffer source after playback.\n     * @param  {Object} node Sound's audio node containing the buffer source.\n     * @return {Howl}\n     */\n    _cleanBuffer: function(node) {\n      var self = this;\n      var isIOS = Howler._navigator && Howler._navigator.vendor.indexOf('Apple') >= 0;\n\n      if (Howler._scratchBuffer && node.bufferSource) {\n        node.bufferSource.onended = null;\n        node.bufferSource.disconnect(0);\n        if (isIOS) {\n          try { node.bufferSource.buffer = Howler._scratchBuffer; } catch(e) {}\n        }\n      }\n      node.bufferSource = null;\n\n      return self;\n    }\n  };\n\n  /** Single Sound Methods **/\n  /***************************************************************************/\n\n  /**\n   * Setup the sound object, which each node attached to a Howl group is contained in.\n   * @param {Object} howl The Howl parent group.\n   */\n  var Sound = function(howl) {\n    this._parent = howl;\n    this.init();\n  };\n  Sound.prototype = {\n    /**\n     * Initialize a new Sound object.\n     * @return {Sound}\n     */\n    init: function() {\n      var self = this;\n      var parent = self._parent;\n\n      // Setup the default parameters.\n      self._muted = parent._muted;\n      self._loop = parent._loop;\n      self._volume = parent._volume;\n      self._rate = parent._rate;\n      self._seek = 0;\n      self._paused = true;\n      self._ended = true;\n      self._sprite = '__default';\n\n      // Generate a unique ID for this sound.\n      self._id = ++Howler._counter;\n\n      // Add itself to the parent's pool.\n      parent._sounds.push(self);\n\n      // Create the new node.\n      self.create();\n\n      return self;\n    },\n\n    /**\n     * Create and setup a new sound object, whether HTML5 Audio or Web Audio.\n     * @return {Sound}\n     */\n    create: function() {\n      var self = this;\n      var parent = self._parent;\n      var volume = (Howler._muted || self._muted || self._parent._muted) ? 0 : self._volume;\n\n      if (parent._webAudio) {\n        // Create the gain node for controlling volume (the source will connect to this).\n        self._node = (typeof Howler.ctx.createGain === 'undefined') ? Howler.ctx.createGainNode() : Howler.ctx.createGain();\n        self._node.gain.setValueAtTime(volume, Howler.ctx.currentTime);\n        self._node.paused = true;\n        self._node.connect(Howler.masterGain);\n      } else {\n        // Get an unlocked Audio object from the pool.\n        self._node = Howler._obtainHtml5Audio();\n\n        // Listen for errors (http://dev.w3.org/html5/spec-author-view/spec.html#mediaerror).\n        self._errorFn = self._errorListener.bind(self);\n        self._node.addEventListener('error', self._errorFn, false);\n\n        // Listen for 'canplaythrough' event to let us know the sound is ready.\n        self._loadFn = self._loadListener.bind(self);\n        self._node.addEventListener(Howler._canPlayEvent, self._loadFn, false);\n\n        // Setup the new audio node.\n        self._node.src = parent._src;\n        self._node.preload = 'auto';\n        self._node.volume = volume * Howler.volume();\n\n        // Begin loading the source.\n        self._node.load();\n      }\n\n      return self;\n    },\n\n    /**\n     * Reset the parameters of this sound to the original state (for recycle).\n     * @return {Sound}\n     */\n    reset: function() {\n      var self = this;\n      var parent = self._parent;\n\n      // Reset all of the parameters of this sound.\n      self._muted = parent._muted;\n      self._loop = parent._loop;\n      self._volume = parent._volume;\n      self._rate = parent._rate;\n      self._seek = 0;\n      self._rateSeek = 0;\n      self._paused = true;\n      self._ended = true;\n      self._sprite = '__default';\n\n      // Generate a new ID so that it isn't confused with the previous sound.\n      self._id = ++Howler._counter;\n\n      return self;\n    },\n\n    /**\n     * HTML5 Audio error listener callback.\n     */\n    _errorListener: function() {\n      var self = this;\n\n      // Fire an error event and pass back the code.\n      self._parent._emit('loaderror', self._id, self._node.error ? self._node.error.code : 0);\n\n      // Clear the event listener.\n      self._node.removeEventListener('error', self._errorFn, false);\n    },\n\n    /**\n     * HTML5 Audio canplaythrough listener callback.\n     */\n    _loadListener: function() {\n      var self = this;\n      var parent = self._parent;\n\n      // Round up the duration to account for the lower precision in HTML5 Audio.\n      parent._duration = Math.ceil(self._node.duration * 10) / 10;\n\n      // Setup a sprite if none is defined.\n      if (Object.keys(parent._sprite).length === 0) {\n        parent._sprite = {__default: [0, parent._duration * 1000]};\n      }\n\n      if (parent._state !== 'loaded') {\n        parent._state = 'loaded';\n        parent._emit('load');\n        parent._loadQueue();\n      }\n\n      // Clear the event listener.\n      self._node.removeEventListener(Howler._canPlayEvent, self._loadFn, false);\n    }\n  };\n\n  /** Helper Methods **/\n  /***************************************************************************/\n\n  var cache = {};\n\n  /**\n   * Buffer a sound from URL, Data URI or cache and decode to audio source (Web Audio API).\n   * @param  {Howl} self\n   */\n  var loadBuffer = function(self) {\n    var url = self._src;\n\n    // Check if the buffer has already been cached and use it instead.\n    if (cache[url]) {\n      // Set the duration from the cache.\n      self._duration = cache[url].duration;\n\n      // Load the sound into this Howl.\n      loadSound(self);\n\n      return;\n    }\n\n    if (/^data:[^;]+;base64,/.test(url)) {\n      // Decode the base64 data URI without XHR, since some browsers don't support it.\n      var data = atob(url.split(',')[1]);\n      var dataView = new Uint8Array(data.length);\n      for (var i=0; i<data.length; ++i) {\n        dataView[i] = data.charCodeAt(i);\n      }\n\n      decodeAudioData(dataView.buffer, self);\n    } else {\n      // Load the buffer from the URL.\n      var xhr = new XMLHttpRequest();\n      xhr.open('GET', url, true);\n      xhr.withCredentials = self._xhrWithCredentials;\n      xhr.responseType = 'arraybuffer';\n      xhr.onload = function() {\n        // Make sure we get a successful response back.\n        var code = (xhr.status + '')[0];\n        if (code !== '0' && code !== '2' && code !== '3') {\n          self._emit('loaderror', null, 'Failed loading audio file with status: ' + xhr.status + '.');\n          return;\n        }\n\n        decodeAudioData(xhr.response, self);\n      };\n      xhr.onerror = function() {\n        // If there is an error, switch to HTML5 Audio.\n        if (self._webAudio) {\n          self._html5 = true;\n          self._webAudio = false;\n          self._sounds = [];\n          delete cache[url];\n          self.load();\n        }\n      };\n      safeXhrSend(xhr);\n    }\n  };\n\n  /**\n   * Send the XHR request wrapped in a try/catch.\n   * @param  {Object} xhr XHR to send.\n   */\n  var safeXhrSend = function(xhr) {\n    try {\n      xhr.send();\n    } catch (e) {\n      xhr.onerror();\n    }\n  };\n\n  /**\n   * Decode audio data from an array buffer.\n   * @param  {ArrayBuffer} arraybuffer The audio data.\n   * @param  {Howl}        self\n   */\n  var decodeAudioData = function(arraybuffer, self) {\n    // Fire a load error if something broke.\n    var error = function() {\n      self._emit('loaderror', null, 'Decoding audio data failed.');\n    };\n\n    // Load the sound on success.\n    var success = function(buffer) {\n      if (buffer && self._sounds.length > 0) {\n        cache[self._src] = buffer;\n        loadSound(self, buffer);\n      } else {\n        error();\n      }\n    };\n\n    // Decode the buffer into an audio source.\n    if (typeof Promise !== 'undefined' && Howler.ctx.decodeAudioData.length === 1) {\n      Howler.ctx.decodeAudioData(arraybuffer).then(success).catch(error);\n    } else {\n      Howler.ctx.decodeAudioData(arraybuffer, success, error);\n    }\n  }\n\n  /**\n   * Sound is now loaded, so finish setting everything up and fire the loaded event.\n   * @param  {Howl} self\n   * @param  {Object} buffer The decoded buffer sound source.\n   */\n  var loadSound = function(self, buffer) {\n    // Set the duration.\n    if (buffer && !self._duration) {\n      self._duration = buffer.duration;\n    }\n\n    // Setup a sprite if none is defined.\n    if (Object.keys(self._sprite).length === 0) {\n      self._sprite = {__default: [0, self._duration * 1000]};\n    }\n\n    // Fire the loaded event.\n    if (self._state !== 'loaded') {\n      self._state = 'loaded';\n      self._emit('load');\n      self._loadQueue();\n    }\n  };\n\n  /**\n   * Setup the audio context when available, or switch to HTML5 Audio mode.\n   */\n  var setupAudioContext = function() {\n    // If we have already detected that Web Audio isn't supported, don't run this step again.\n    if (!Howler.usingWebAudio) {\n      return;\n    }\n\n    // Check if we are using Web Audio and setup the AudioContext if we are.\n    try {\n      if (typeof AudioContext !== 'undefined') {\n        Howler.ctx = new AudioContext();\n      } else if (typeof webkitAudioContext !== 'undefined') {\n        Howler.ctx = new webkitAudioContext();\n      } else {\n        Howler.usingWebAudio = false;\n      }\n    } catch(e) {\n      Howler.usingWebAudio = false;\n    }\n\n    // If the audio context creation still failed, set using web audio to false.\n    if (!Howler.ctx) {\n      Howler.usingWebAudio = false;\n    }\n\n    // Check if a webview is being used on iOS8 or earlier (rather than the browser).\n    // If it is, disable Web Audio as it causes crashing.\n    var iOS = (/iP(hone|od|ad)/.test(Howler._navigator && Howler._navigator.platform));\n    var appVersion = Howler._navigator && Howler._navigator.appVersion.match(/OS (\\d+)_(\\d+)_?(\\d+)?/);\n    var version = appVersion ? parseInt(appVersion[1], 10) : null;\n    if (iOS && version && version < 9) {\n      var safari = /safari/.test(Howler._navigator && Howler._navigator.userAgent.toLowerCase());\n      if (Howler._navigator && Howler._navigator.standalone && !safari || Howler._navigator && !Howler._navigator.standalone && !safari) {\n        Howler.usingWebAudio = false;\n      }\n    }\n\n    // Create and expose the master GainNode when using Web Audio (useful for plugins or advanced usage).\n    if (Howler.usingWebAudio) {\n      Howler.masterGain = (typeof Howler.ctx.createGain === 'undefined') ? Howler.ctx.createGainNode() : Howler.ctx.createGain();\n      Howler.masterGain.gain.setValueAtTime(Howler._muted ? 0 : 1, Howler.ctx.currentTime);\n      Howler.masterGain.connect(Howler.ctx.destination);\n    }\n\n    // Re-run the setup on Howler.\n    Howler._setup();\n  };\n\n  // Add support for AMD (Asynchronous Module Definition) libraries such as require.js.\n  if (typeof define === 'function' && define.amd) {\n    define([], function() {\n      return {\n        Howler: Howler,\n        Howl: Howl\n      };\n    });\n  }\n\n  // Add support for CommonJS libraries such as browserify.\n  if (typeof exports !== 'undefined') {\n    exports.Howler = Howler;\n    exports.Howl = Howl;\n  }\n\n  // Define globally in case AMD is not available or unused.\n  if (typeof window !== 'undefined') {\n    window.HowlerGlobal = HowlerGlobal;\n    window.Howler = Howler;\n    window.Howl = Howl;\n    window.Sound = Sound;\n  } else if (typeof global !== 'undefined') { // Add to global in Node.js (for testing, etc).\n    global.HowlerGlobal = HowlerGlobal;\n    global.Howler = Howler;\n    global.Howl = Howl;\n    global.Sound = Sound;\n  }\n})();\n\n\n/*!\n *  Spatial Plugin - Adds support for stereo and 3D audio where Web Audio is supported.\n *  \n *  howler.js v2.1.1\n *  howlerjs.com\n *\n *  (c) 2013-2018, James Simpson of GoldFire Studios\n *  goldfirestudios.com\n *\n *  MIT License\n */\n\n(function() {\n\n  'use strict';\n\n  // Setup default properties.\n  HowlerGlobal.prototype._pos = [0, 0, 0];\n  HowlerGlobal.prototype._orientation = [0, 0, -1, 0, 1, 0];\n\n  /** Global Methods **/\n  /***************************************************************************/\n\n  /**\n   * Helper method to update the stereo panning position of all current Howls.\n   * Future Howls will not use this value unless explicitly set.\n   * @param  {Number} pan A value of -1.0 is all the way left and 1.0 is all the way right.\n   * @return {Howler/Number}     Self or current stereo panning value.\n   */\n  HowlerGlobal.prototype.stereo = function(pan) {\n    var self = this;\n\n    // Stop right here if not using Web Audio.\n    if (!self.ctx || !self.ctx.listener) {\n      return self;\n    }\n\n    // Loop through all Howls and update their stereo panning.\n    for (var i=self._howls.length-1; i>=0; i--) {\n      self._howls[i].stereo(pan);\n    }\n\n    return self;\n  };\n\n  /**\n   * Get/set the position of the listener in 3D cartesian space. Sounds using\n   * 3D position will be relative to the listener's position.\n   * @param  {Number} x The x-position of the listener.\n   * @param  {Number} y The y-position of the listener.\n   * @param  {Number} z The z-position of the listener.\n   * @return {Howler/Array}   Self or current listener position.\n   */\n  HowlerGlobal.prototype.pos = function(x, y, z) {\n    var self = this;\n\n    // Stop right here if not using Web Audio.\n    if (!self.ctx || !self.ctx.listener) {\n      return self;\n    }\n\n    // Set the defaults for optional 'y' & 'z'.\n    y = (typeof y !== 'number') ? self._pos[1] : y;\n    z = (typeof z !== 'number') ? self._pos[2] : z;\n\n    if (typeof x === 'number') {\n      self._pos = [x, y, z];\n\n      if (typeof self.ctx.listener.positionX !== 'undefined') {\n        self.ctx.listener.positionX.setTargetAtTime(self._pos[0], Howler.ctx.currentTime, 0.1);\n        self.ctx.listener.positionY.setTargetAtTime(self._pos[1], Howler.ctx.currentTime, 0.1);\n        self.ctx.listener.positionZ.setTargetAtTime(self._pos[2], Howler.ctx.currentTime, 0.1);\n      } else {\n        self.ctx.listener.setPosition(self._pos[0], self._pos[1], self._pos[2]);\n      }\n    } else {\n      return self._pos;\n    }\n\n    return self;\n  };\n\n  /**\n   * Get/set the direction the listener is pointing in the 3D cartesian space.\n   * A front and up vector must be provided. The front is the direction the\n   * face of the listener is pointing, and up is the direction the top of the\n   * listener is pointing. Thus, these values are expected to be at right angles\n   * from each other.\n   * @param  {Number} x   The x-orientation of the listener.\n   * @param  {Number} y   The y-orientation of the listener.\n   * @param  {Number} z   The z-orientation of the listener.\n   * @param  {Number} xUp The x-orientation of the top of the listener.\n   * @param  {Number} yUp The y-orientation of the top of the listener.\n   * @param  {Number} zUp The z-orientation of the top of the listener.\n   * @return {Howler/Array}     Returns self or the current orientation vectors.\n   */\n  HowlerGlobal.prototype.orientation = function(x, y, z, xUp, yUp, zUp) {\n    var self = this;\n\n    // Stop right here if not using Web Audio.\n    if (!self.ctx || !self.ctx.listener) {\n      return self;\n    }\n\n    // Set the defaults for optional 'y' & 'z'.\n    var or = self._orientation;\n    y = (typeof y !== 'number') ? or[1] : y;\n    z = (typeof z !== 'number') ? or[2] : z;\n    xUp = (typeof xUp !== 'number') ? or[3] : xUp;\n    yUp = (typeof yUp !== 'number') ? or[4] : yUp;\n    zUp = (typeof zUp !== 'number') ? or[5] : zUp;\n\n    if (typeof x === 'number') {\n      self._orientation = [x, y, z, xUp, yUp, zUp];\n\n      if (typeof self.ctx.listener.forwardX !== 'undefined') {\n        self.ctx.listener.forwardX.setTargetAtTime(x, Howler.ctx.currentTime, 0.1);\n        self.ctx.listener.forwardY.setTargetAtTime(y, Howler.ctx.currentTime, 0.1);\n        self.ctx.listener.forwardZ.setTargetAtTime(z, Howler.ctx.currentTime, 0.1);\n        self.ctx.listener.upX.setTargetAtTime(x, Howler.ctx.currentTime, 0.1);\n        self.ctx.listener.upY.setTargetAtTime(y, Howler.ctx.currentTime, 0.1);\n        self.ctx.listener.upZ.setTargetAtTime(z, Howler.ctx.currentTime, 0.1);\n      } else {\n        self.ctx.listener.setOrientation(x, y, z, xUp, yUp, zUp);\n      }\n    } else {\n      return or;\n    }\n\n    return self;\n  };\n\n  /** Group Methods **/\n  /***************************************************************************/\n\n  /**\n   * Add new properties to the core init.\n   * @param  {Function} _super Core init method.\n   * @return {Howl}\n   */\n  Howl.prototype.init = (function(_super) {\n    return function(o) {\n      var self = this;\n\n      // Setup user-defined default properties.\n      self._orientation = o.orientation || [1, 0, 0];\n      self._stereo = o.stereo || null;\n      self._pos = o.pos || null;\n      self._pannerAttr = {\n        coneInnerAngle: typeof o.coneInnerAngle !== 'undefined' ? o.coneInnerAngle : 360,\n        coneOuterAngle: typeof o.coneOuterAngle !== 'undefined' ? o.coneOuterAngle : 360,\n        coneOuterGain: typeof o.coneOuterGain !== 'undefined' ? o.coneOuterGain : 0,\n        distanceModel: typeof o.distanceModel !== 'undefined' ? o.distanceModel : 'inverse',\n        maxDistance: typeof o.maxDistance !== 'undefined' ? o.maxDistance : 10000,\n        panningModel: typeof o.panningModel !== 'undefined' ? o.panningModel : 'HRTF',\n        refDistance: typeof o.refDistance !== 'undefined' ? o.refDistance : 1,\n        rolloffFactor: typeof o.rolloffFactor !== 'undefined' ? o.rolloffFactor : 1\n      };\n\n      // Setup event listeners.\n      self._onstereo = o.onstereo ? [{fn: o.onstereo}] : [];\n      self._onpos = o.onpos ? [{fn: o.onpos}] : [];\n      self._onorientation = o.onorientation ? [{fn: o.onorientation}] : [];\n\n      // Complete initilization with howler.js core's init function.\n      return _super.call(this, o);\n    };\n  })(Howl.prototype.init);\n\n  /**\n   * Get/set the stereo panning of the audio source for this sound or all in the group.\n   * @param  {Number} pan  A value of -1.0 is all the way left and 1.0 is all the way right.\n   * @param  {Number} id (optional) The sound ID. If none is passed, all in group will be updated.\n   * @return {Howl/Number}    Returns self or the current stereo panning value.\n   */\n  Howl.prototype.stereo = function(pan, id) {\n    var self = this;\n\n    // Stop right here if not using Web Audio.\n    if (!self._webAudio) {\n      return self;\n    }\n\n    // If the sound hasn't loaded, add it to the load queue to change stereo pan when capable.\n    if (self._state !== 'loaded') {\n      self._queue.push({\n        event: 'stereo',\n        action: function() {\n          self.stereo(pan, id);\n        }\n      });\n\n      return self;\n    }\n\n    // Check for PannerStereoNode support and fallback to PannerNode if it doesn't exist.\n    var pannerType = (typeof Howler.ctx.createStereoPanner === 'undefined') ? 'spatial' : 'stereo';\n\n    // Setup the group's stereo panning if no ID is passed.\n    if (typeof id === 'undefined') {\n      // Return the group's stereo panning if no parameters are passed.\n      if (typeof pan === 'number') {\n        self._stereo = pan;\n        self._pos = [pan, 0, 0];\n      } else {\n        return self._stereo;\n      }\n    }\n\n    // Change the streo panning of one or all sounds in group.\n    var ids = self._getSoundIds(id);\n    for (var i=0; i<ids.length; i++) {\n      // Get the sound.\n      var sound = self._soundById(ids[i]);\n\n      if (sound) {\n        if (typeof pan === 'number') {\n          sound._stereo = pan;\n          sound._pos = [pan, 0, 0];\n\n          if (sound._node) {\n            // If we are falling back, make sure the panningModel is equalpower.\n            sound._pannerAttr.panningModel = 'equalpower';\n\n            // Check if there is a panner setup and create a new one if not.\n            if (!sound._panner || !sound._panner.pan) {\n              setupPanner(sound, pannerType);\n            }\n\n            if (pannerType === 'spatial') {\n              if (typeof sound._panner.positionX !== 'undefined') {\n                sound._panner.positionX.setValueAtTime(pan, Howler.ctx.currentTime);\n                sound._panner.positionY.setValueAtTime(0, Howler.ctx.currentTime);\n                sound._panner.positionZ.setValueAtTime(0, Howler.ctx.currentTime);\n              } else {\n                sound._panner.setPosition(pan, 0, 0);\n              }\n            } else {\n              sound._panner.pan.setValueAtTime(pan, Howler.ctx.currentTime);\n            }\n          }\n\n          self._emit('stereo', sound._id);\n        } else {\n          return sound._stereo;\n        }\n      }\n    }\n\n    return self;\n  };\n\n  /**\n   * Get/set the 3D spatial position of the audio source for this sound or group relative to the global listener.\n   * @param  {Number} x  The x-position of the audio source.\n   * @param  {Number} y  The y-position of the audio source.\n   * @param  {Number} z  The z-position of the audio source.\n   * @param  {Number} id (optional) The sound ID. If none is passed, all in group will be updated.\n   * @return {Howl/Array}    Returns self or the current 3D spatial position: [x, y, z].\n   */\n  Howl.prototype.pos = function(x, y, z, id) {\n    var self = this;\n\n    // Stop right here if not using Web Audio.\n    if (!self._webAudio) {\n      return self;\n    }\n\n    // If the sound hasn't loaded, add it to the load queue to change position when capable.\n    if (self._state !== 'loaded') {\n      self._queue.push({\n        event: 'pos',\n        action: function() {\n          self.pos(x, y, z, id);\n        }\n      });\n\n      return self;\n    }\n\n    // Set the defaults for optional 'y' & 'z'.\n    y = (typeof y !== 'number') ? 0 : y;\n    z = (typeof z !== 'number') ? -0.5 : z;\n\n    // Setup the group's spatial position if no ID is passed.\n    if (typeof id === 'undefined') {\n      // Return the group's spatial position if no parameters are passed.\n      if (typeof x === 'number') {\n        self._pos = [x, y, z];\n      } else {\n        return self._pos;\n      }\n    }\n\n    // Change the spatial position of one or all sounds in group.\n    var ids = self._getSoundIds(id);\n    for (var i=0; i<ids.length; i++) {\n      // Get the sound.\n      var sound = self._soundById(ids[i]);\n\n      if (sound) {\n        if (typeof x === 'number') {\n          sound._pos = [x, y, z];\n\n          if (sound._node) {\n            // Check if there is a panner setup and create a new one if not.\n            if (!sound._panner || sound._panner.pan) {\n              setupPanner(sound, 'spatial');\n            }\n\n            if (typeof sound._panner.positionX !== 'undefined') {\n              sound._panner.positionX.setValueAtTime(x, Howler.ctx.currentTime);\n              sound._panner.positionY.setValueAtTime(y, Howler.ctx.currentTime);\n              sound._panner.positionZ.setValueAtTime(z, Howler.ctx.currentTime);\n            } else {\n              sound._panner.setPosition(x, y, z);\n            }\n          }\n\n          self._emit('pos', sound._id);\n        } else {\n          return sound._pos;\n        }\n      }\n    }\n\n    return self;\n  };\n\n  /**\n   * Get/set the direction the audio source is pointing in the 3D cartesian coordinate\n   * space. Depending on how direction the sound is, based on the `cone` attributes,\n   * a sound pointing away from the listener can be quiet or silent.\n   * @param  {Number} x  The x-orientation of the source.\n   * @param  {Number} y  The y-orientation of the source.\n   * @param  {Number} z  The z-orientation of the source.\n   * @param  {Number} id (optional) The sound ID. If none is passed, all in group will be updated.\n   * @return {Howl/Array}    Returns self or the current 3D spatial orientation: [x, y, z].\n   */\n  Howl.prototype.orientation = function(x, y, z, id) {\n    var self = this;\n\n    // Stop right here if not using Web Audio.\n    if (!self._webAudio) {\n      return self;\n    }\n\n    // If the sound hasn't loaded, add it to the load queue to change orientation when capable.\n    if (self._state !== 'loaded') {\n      self._queue.push({\n        event: 'orientation',\n        action: function() {\n          self.orientation(x, y, z, id);\n        }\n      });\n\n      return self;\n    }\n\n    // Set the defaults for optional 'y' & 'z'.\n    y = (typeof y !== 'number') ? self._orientation[1] : y;\n    z = (typeof z !== 'number') ? self._orientation[2] : z;\n\n    // Setup the group's spatial orientation if no ID is passed.\n    if (typeof id === 'undefined') {\n      // Return the group's spatial orientation if no parameters are passed.\n      if (typeof x === 'number') {\n        self._orientation = [x, y, z];\n      } else {\n        return self._orientation;\n      }\n    }\n\n    // Change the spatial orientation of one or all sounds in group.\n    var ids = self._getSoundIds(id);\n    for (var i=0; i<ids.length; i++) {\n      // Get the sound.\n      var sound = self._soundById(ids[i]);\n\n      if (sound) {\n        if (typeof x === 'number') {\n          sound._orientation = [x, y, z];\n\n          if (sound._node) {\n            // Check if there is a panner setup and create a new one if not.\n            if (!sound._panner) {\n              // Make sure we have a position to setup the node with.\n              if (!sound._pos) {\n                sound._pos = self._pos || [0, 0, -0.5];\n              }\n\n              setupPanner(sound, 'spatial');\n            }\n\n            if (typeof sound._panner.orientationX !== 'undefined') {\n              sound._panner.orientationX.setValueAtTime(x, Howler.ctx.currentTime);\n              sound._panner.orientationY.setValueAtTime(y, Howler.ctx.currentTime);\n              sound._panner.orientationZ.setValueAtTime(z, Howler.ctx.currentTime);\n            } else {\n              sound._panner.setOrientation(x, y, z);\n            }\n          }\n\n          self._emit('orientation', sound._id);\n        } else {\n          return sound._orientation;\n        }\n      }\n    }\n\n    return self;\n  };\n\n  /**\n   * Get/set the panner node's attributes for a sound or group of sounds.\n   * This method can optionall take 0, 1 or 2 arguments.\n   *   pannerAttr() -> Returns the group's values.\n   *   pannerAttr(id) -> Returns the sound id's values.\n   *   pannerAttr(o) -> Set's the values of all sounds in this Howl group.\n   *   pannerAttr(o, id) -> Set's the values of passed sound id.\n   *\n   *   Attributes:\n   *     coneInnerAngle - (360 by default) A parameter for directional audio sources, this is an angle, in degrees,\n   *                      inside of which there will be no volume reduction.\n   *     coneOuterAngle - (360 by default) A parameter for directional audio sources, this is an angle, in degrees,\n   *                      outside of which the volume will be reduced to a constant value of `coneOuterGain`.\n   *     coneOuterGain - (0 by default) A parameter for directional audio sources, this is the gain outside of the\n   *                     `coneOuterAngle`. It is a linear value in the range `[0, 1]`.\n   *     distanceModel - ('inverse' by default) Determines algorithm used to reduce volume as audio moves away from\n   *                     listener. Can be `linear`, `inverse` or `exponential.\n   *     maxDistance - (10000 by default) The maximum distance between source and listener, after which the volume\n   *                   will not be reduced any further.\n   *     refDistance - (1 by default) A reference distance for reducing volume as source moves further from the listener.\n   *                   This is simply a variable of the distance model and has a different effect depending on which model\n   *                   is used and the scale of your coordinates. Generally, volume will be equal to 1 at this distance.\n   *     rolloffFactor - (1 by default) How quickly the volume reduces as source moves from listener. This is simply a\n   *                     variable of the distance model and can be in the range of `[0, 1]` with `linear` and `[0, ∞]`\n   *                     with `inverse` and `exponential`.\n   *     panningModel - ('HRTF' by default) Determines which spatialization algorithm is used to position audio.\n   *                     Can be `HRTF` or `equalpower`.\n   *\n   * @return {Howl/Object} Returns self or current panner attributes.\n   */\n  Howl.prototype.pannerAttr = function() {\n    var self = this;\n    var args = arguments;\n    var o, id, sound;\n\n    // Stop right here if not using Web Audio.\n    if (!self._webAudio) {\n      return self;\n    }\n\n    // Determine the values based on arguments.\n    if (args.length === 0) {\n      // Return the group's panner attribute values.\n      return self._pannerAttr;\n    } else if (args.length === 1) {\n      if (typeof args[0] === 'object') {\n        o = args[0];\n\n        // Set the grou's panner attribute values.\n        if (typeof id === 'undefined') {\n          if (!o.pannerAttr) {\n            o.pannerAttr = {\n              coneInnerAngle: o.coneInnerAngle,\n              coneOuterAngle: o.coneOuterAngle,\n              coneOuterGain: o.coneOuterGain,\n              distanceModel: o.distanceModel,\n              maxDistance: o.maxDistance,\n              refDistance: o.refDistance,\n              rolloffFactor: o.rolloffFactor,\n              panningModel: o.panningModel\n            };\n          }\n\n          self._pannerAttr = {\n            coneInnerAngle: typeof o.pannerAttr.coneInnerAngle !== 'undefined' ? o.pannerAttr.coneInnerAngle : self._coneInnerAngle,\n            coneOuterAngle: typeof o.pannerAttr.coneOuterAngle !== 'undefined' ? o.pannerAttr.coneOuterAngle : self._coneOuterAngle,\n            coneOuterGain: typeof o.pannerAttr.coneOuterGain !== 'undefined' ? o.pannerAttr.coneOuterGain : self._coneOuterGain,\n            distanceModel: typeof o.pannerAttr.distanceModel !== 'undefined' ? o.pannerAttr.distanceModel : self._distanceModel,\n            maxDistance: typeof o.pannerAttr.maxDistance !== 'undefined' ? o.pannerAttr.maxDistance : self._maxDistance,\n            refDistance: typeof o.pannerAttr.refDistance !== 'undefined' ? o.pannerAttr.refDistance : self._refDistance,\n            rolloffFactor: typeof o.pannerAttr.rolloffFactor !== 'undefined' ? o.pannerAttr.rolloffFactor : self._rolloffFactor,\n            panningModel: typeof o.pannerAttr.panningModel !== 'undefined' ? o.pannerAttr.panningModel : self._panningModel\n          };\n        }\n      } else {\n        // Return this sound's panner attribute values.\n        sound = self._soundById(parseInt(args[0], 10));\n        return sound ? sound._pannerAttr : self._pannerAttr;\n      }\n    } else if (args.length === 2) {\n      o = args[0];\n      id = parseInt(args[1], 10);\n    }\n\n    // Update the values of the specified sounds.\n    var ids = self._getSoundIds(id);\n    for (var i=0; i<ids.length; i++) {\n      sound = self._soundById(ids[i]);\n\n      if (sound) {\n        // Merge the new values into the sound.\n        var pa = sound._pannerAttr;\n        pa = {\n          coneInnerAngle: typeof o.coneInnerAngle !== 'undefined' ? o.coneInnerAngle : pa.coneInnerAngle,\n          coneOuterAngle: typeof o.coneOuterAngle !== 'undefined' ? o.coneOuterAngle : pa.coneOuterAngle,\n          coneOuterGain: typeof o.coneOuterGain !== 'undefined' ? o.coneOuterGain : pa.coneOuterGain,\n          distanceModel: typeof o.distanceModel !== 'undefined' ? o.distanceModel : pa.distanceModel,\n          maxDistance: typeof o.maxDistance !== 'undefined' ? o.maxDistance : pa.maxDistance,\n          refDistance: typeof o.refDistance !== 'undefined' ? o.refDistance : pa.refDistance,\n          rolloffFactor: typeof o.rolloffFactor !== 'undefined' ? o.rolloffFactor : pa.rolloffFactor,\n          panningModel: typeof o.panningModel !== 'undefined' ? o.panningModel : pa.panningModel\n        };\n\n        // Update the panner values or create a new panner if none exists.\n        var panner = sound._panner;\n        if (panner) {\n          panner.coneInnerAngle = pa.coneInnerAngle;\n          panner.coneOuterAngle = pa.coneOuterAngle;\n          panner.coneOuterGain = pa.coneOuterGain;\n          panner.distanceModel = pa.distanceModel;\n          panner.maxDistance = pa.maxDistance;\n          panner.refDistance = pa.refDistance;\n          panner.rolloffFactor = pa.rolloffFactor;\n          panner.panningModel = pa.panningModel;\n        } else {\n          // Make sure we have a position to setup the node with.\n          if (!sound._pos) {\n            sound._pos = self._pos || [0, 0, -0.5];\n          }\n\n          // Create a new panner node.\n          setupPanner(sound, 'spatial');\n        }\n      }\n    }\n\n    return self;\n  };\n\n  /** Single Sound Methods **/\n  /***************************************************************************/\n\n  /**\n   * Add new properties to the core Sound init.\n   * @param  {Function} _super Core Sound init method.\n   * @return {Sound}\n   */\n  Sound.prototype.init = (function(_super) {\n    return function() {\n      var self = this;\n      var parent = self._parent;\n\n      // Setup user-defined default properties.\n      self._orientation = parent._orientation;\n      self._stereo = parent._stereo;\n      self._pos = parent._pos;\n      self._pannerAttr = parent._pannerAttr;\n\n      // Complete initilization with howler.js core Sound's init function.\n      _super.call(this);\n\n      // If a stereo or position was specified, set it up.\n      if (self._stereo) {\n        parent.stereo(self._stereo);\n      } else if (self._pos) {\n        parent.pos(self._pos[0], self._pos[1], self._pos[2], self._id);\n      }\n    };\n  })(Sound.prototype.init);\n\n  /**\n   * Override the Sound.reset method to clean up properties from the spatial plugin.\n   * @param  {Function} _super Sound reset method.\n   * @return {Sound}\n   */\n  Sound.prototype.reset = (function(_super) {\n    return function() {\n      var self = this;\n      var parent = self._parent;\n\n      // Reset all spatial plugin properties on this sound.\n      self._orientation = parent._orientation;\n      self._stereo = parent._stereo;\n      self._pos = parent._pos;\n      self._pannerAttr = parent._pannerAttr;\n\n      // If a stereo or position was specified, set it up.\n      if (self._stereo) {\n        parent.stereo(self._stereo);\n      } else if (self._pos) {\n        parent.pos(self._pos[0], self._pos[1], self._pos[2], self._id);\n      } else if (self._panner) {\n        // Disconnect the panner.\n        self._panner.disconnect(0);\n        self._panner = undefined;\n        parent._refreshBuffer(self);\n      }\n\n      // Complete resetting of the sound.\n      return _super.call(this);\n    };\n  })(Sound.prototype.reset);\n\n  /** Helper Methods **/\n  /***************************************************************************/\n\n  /**\n   * Create a new panner node and save it on the sound.\n   * @param  {Sound} sound Specific sound to setup panning on.\n   * @param {String} type Type of panner to create: 'stereo' or 'spatial'.\n   */\n  var setupPanner = function(sound, type) {\n    type = type || 'spatial';\n\n    // Create the new panner node.\n    if (type === 'spatial') {\n      sound._panner = Howler.ctx.createPanner();\n      sound._panner.coneInnerAngle = sound._pannerAttr.coneInnerAngle;\n      sound._panner.coneOuterAngle = sound._pannerAttr.coneOuterAngle;\n      sound._panner.coneOuterGain = sound._pannerAttr.coneOuterGain;\n      sound._panner.distanceModel = sound._pannerAttr.distanceModel;\n      sound._panner.maxDistance = sound._pannerAttr.maxDistance;\n      sound._panner.refDistance = sound._pannerAttr.refDistance;\n      sound._panner.rolloffFactor = sound._pannerAttr.rolloffFactor;\n      sound._panner.panningModel = sound._pannerAttr.panningModel;\n\n      if (typeof sound._panner.positionX !== 'undefined') {\n        sound._panner.positionX.setValueAtTime(sound._pos[0], Howler.ctx.currentTime);\n        sound._panner.positionY.setValueAtTime(sound._pos[1], Howler.ctx.currentTime);\n        sound._panner.positionZ.setValueAtTime(sound._pos[2], Howler.ctx.currentTime);\n      } else {\n        sound._panner.setPosition(sound._pos[0], sound._pos[1], sound._pos[2]);\n      }\n\n      if (typeof sound._panner.orientationX !== 'undefined') {\n        sound._panner.orientationX.setValueAtTime(sound._orientation[0], Howler.ctx.currentTime);\n        sound._panner.orientationY.setValueAtTime(sound._orientation[1], Howler.ctx.currentTime);\n        sound._panner.orientationZ.setValueAtTime(sound._orientation[2], Howler.ctx.currentTime);\n      } else {\n        sound._panner.setOrientation(sound._orientation[0], sound._orientation[1], sound._orientation[2]);\n      }\n    } else {\n      sound._panner = Howler.ctx.createStereoPanner();\n      sound._panner.pan.setValueAtTime(sound._stereo, Howler.ctx.currentTime);\n    }\n\n    sound._panner.connect(sound._node);\n\n    // Update the connections.\n    if (!sound._paused) {\n      sound._parent.pause(sound._id, true).play(sound._id, true);\n    }\n  };\n})();\n","module.exports = __webpack_public_path__ + \"67dc8e1070120de844fb468518e9c954.mp3\";","module.exports = __webpack_public_path__ + \"d05a06d2694b104f55b1ca9fda10d1ba.mp3\";","module.exports = __webpack_public_path__ + \"7b89aa659c45a19e5206e956f59fe121.mp3\";","module.exports = __webpack_public_path__ + \"150d326201c1badf71828ef58137212a.png\";","module.exports = __webpack_public_path__ + \"d980b77697f4f4113af82a9d25865af3.mp3\";","module.exports = __webpack_public_path__ + \"f836cc4bfa84560d09896ac8d631dc8f.png\";","var g;\n\n// This works in non-strict mode\ng = (function() {\n\treturn this;\n})();\n\ntry {\n\t// This works if eval is allowed (see CSP)\n\tg = g || new Function(\"return this\")();\n} catch (e) {\n\t// This works if the window reference is available\n\tif (typeof window === \"object\") g = window;\n}\n\n// g can still be undefined, but nothing to do about it...\n// We return undefined, instead of nothing here, so it's\n// easier to handle this case. if(!global) { ...}\n\nmodule.exports = g;\n","class Rectangle {\n  constructor(x, y, width, height) {\n\n    this.x = x;\n    this.y = y;\n    this.width = width;\n    this.height = height;\n  }\n\n  left() {\n    return this.x;\n  }\n\n  right() {\n    return this.x + this.width;\n  }\n\n  top() {\n    return this.y;\n  }\n\n  bottom() {\n    return this.y + this.height;\n  }\n\n  intersects(otherRect) {\n    //   const horzIntersection = this.left() <= otherRect.left() && this.right() <= otherRect.right();\n    //   const vertIntersection = this.top() >= otherRect.top() && this.bottom() <= otherRect.bottom();\n\n    const isIntersection =\n      this.x < otherRect.x + otherRect.width &&\n      this.x + this.width > otherRect.x &&\n      this.y < otherRect.y + otherRect.height &&\n      this.y + this.height > otherRect.y\n\n    // return horzIntersection && vertIntersection;\n    return isIntersection;\n  }\n}\n\nexport default Rectangle;","class Vector2d {\n  constructor(x, y) {\n    this.x = x;\n    this.y = y;\n  }\n\n  add(v2) {\n    return new Vector2d(this.x + v2.x, this.y + v2.y);\n  }\n\n  subtract(v2) {\n    return new Vector2d(this.x - v2.x, this.y - v2.y);\n  }\n\n  multiply(s) {\n    return new Vector2d(this.x * s, this.y * s);\n  }\n\n  length() {\n    return Math.sqrt(this.x * this.x + this.y * this.y);\n  }\n\n  normalize() {\n    let divisor = 1.0 / (this.length() + .000000001);\n    return this.multiply(divisor);\n  }\n}\n\nexport default Vector2d;","import Rectangle from \"../util/rectangle\"\nimport Vector2d from \"../util/vector\";\n\nclass Entity {\n  constructor({\n    position,\n    direction,\n    width,\n    height,\n    game,\n    sprite\n  }) {\n    this.position = position;\n    this.direction = direction;\n\n    this.width = width;\n    this.height = height;\n    this.game = game;\n    this.sprite = sprite;\n  }\n\n  collisionRect() {\n    return new Rectangle(this.position.x, this.position.y, this.width, this.height)\n  }\n\n  update(dt) {\n    const newX = this.position.x + this.direction.x / dt;\n    const newY = this.position.y + this.direction.y / dt;\n    this.position = new Vector2d(newX, newY);\n\n    if (this.sprite) {\n      this.sprite.updatePos(this.position)\n      this.sprite.update(dt);\n    }\n  }\n\n  render(ctx) {\n    if (this.sprite) {\n      this.sprite.render(ctx);\n    }\n  }\n}\n\nexport default Entity","export const CANVAS_WIDTH = 480;\nexport const CANVAS_HEIGHT = 640;\n\n// Smaller is more likely\nexport const ENEMY_FIRING_FREQUENCY = 10;\nexport const SPRITES_FILE_NAME = \"sprites-2x.png\";","class Sprite {\n  constructor(image, framePos, spritePos, size, speed, frames, dir, onceFinishCallback) {\n    this.framePos = framePos;\n    this.size = size;\n    this.spritePos = spritePos;\n    this.speed = typeof speed === 'number' ? speed : 0;\n    this.frames = frames;\n    this._index = 0;\n    this.image = image;\n    this.dir = dir || 'horizontal';\n    this.done = false;\n    this.onceFinishCallback = onceFinishCallback;\n  };\n  update(dt, newframePos) {\n    // this._index += this.speed * dt;\n    this._index += 0.005 * dt;\n  }\n\n  updatePos(newPos) {\n    this.spritePos = newPos;\n  }\n\n  render(ctx) {\n    var frame;\n\n    if (this.speed > 0) {\n      var max = this.frames.length;\n      var idx = Math.floor(this._index);\n      frame = this.frames[idx % max];\n\n      if (this.onceFinishCallback && idx >= max && !this.done) {\n        this.onceFinishCallback();\n        this.done = true;\n        return;\n      }\n    } else {\n      frame = 0;\n    }\n\n    var frameX = this.framePos.x;\n    var frameY = this.framePos.y;\n\n    if (this.dir == 'vertical') {\n      frameY += frame * this.size[1];\n    } else {\n      frameX += frame * this.size[0];\n    }\n\n    ctx.drawImage(this.image,\n      frameX, frameY,\n      this.size[0], this.size[1],\n      this.spritePos.x, this.spritePos.y,\n      this.size[0], this.size[1]);\n  }\n}\n\nexport default Sprite;","import Entity from \"./entity\"\nimport Vector2d from \"../util/vector\";\nimport * as GameConstants from \"../util/constants\"\nimport Sprite from \"../util/sprite\";\n\nimport {\n  Howl,\n  Howler\n} from \"howler\";\n\nimport explosionSoundSrc from \"../sounds/explosion.mp3\";\n\n\nconst WAIT_TIME_AFTER_PLAYER_DEATH = 1000;\n\n\nclass Player extends Entity {\n  constructor({\n    position,\n    speed,\n    direction,\n    canvasWidth,\n    image\n  }) {\n    let sprite = new Sprite(image, new Vector2d(2, 140), position, [32, 32], 1, [0])\n    let width = 32;\n    let height = 32;\n\n    super({\n      position,\n      speed,\n      direction,\n      width,\n      height,\n      canvasWidth,\n      sprite\n    });\n\n    this.spriteImage = image;\n    this.canvasWidth = canvasWidth;\n\n  }\n\n  update(dt) {\n    super.update(dt);\n    if (this.position.x < 0) {\n      this.position = new Vector2d(0, this.position.y)\n    } else if ((this.position.x + this.width) > GameConstants.CANVAS_WIDTH) {\n      this.position = new Vector2d(GameConstants.CANVAS_WIDTH - this.width, this.position.y)\n    }\n  }\n\n  die(game) {\n    if (this.dying) {\n      return;\n    }\n    game.removeLife();\n\n    let spriteFinishCallback = () => {\n      game.removeEntities([this]);\n      if (game.livesRemaining > 0) {\n        window.setTimeout(game.setupPlayer.bind(game), WAIT_TIME_AFTER_PLAYER_DEATH);\n      }\n    }\n\n    this.dying = true;\n    this.direction = new Vector2d(0, 0);\n\n    let sprite = new Sprite(this.spriteImage, new Vector2d(158, 139), this.position, [32, 32], 1,\n      [0, 1, 2], \"horizontal\", spriteFinishCallback)\n    this.sprite = sprite;\n    clearInterval(this.fireInterval)\n\n    if (game.soundOn) {\n      let sound = new Howl({\n        src: [explosionSoundSrc]\n      });\n\n      sound.play();\n    }\n  }\n}\nexport default Player;","import Entity from \"./entity\"\nimport Vector2d from \"../util/vector\";\nimport * as GameConstants from \"../util/constants\"\n\nimport {\n  Howl,\n  Howler\n} from \"howler\";\n\nimport playerLaserSound from \"../sounds/laser_default.mp3\";\nimport enemyLaserSound from \"../sounds/enemy_laser.mp3\";\n\n\nexport const ENEMY_BULLET_TYPE = \"ENEMY_BULLET_TYPE\";\nexport const PLAYER_BULLET_TYPE = \"PLAYER_BULLET_TYPE\";\n\nexport const BULLET_SPEED = 5;\n\nexport class Bullet extends Entity {\n  constructor({\n    position,\n    direction,\n    type,\n    game\n  }) {\n    let bulletWidth = 2;\n    let bulletHeight = 12;\n\n    super({\n      position,\n      direction,\n      width: bulletWidth,\n      height: bulletHeight\n    });\n\n    this.type = type;\n\n\n    if (this.type === ENEMY_BULLET_TYPE) {\n      this.direction = new Vector2d(0, BULLET_SPEED);\n    } else if (this.type === PLAYER_BULLET_TYPE) {\n      this.direction = new Vector2d(0, -1 * BULLET_SPEED);\n    }\n    this.direction = this.direction.multiply(20);\n\n    if (game.soundOn) {\n      let soundSrc = playerLaserSound;\n      if (this.type === ENEMY_BULLET_TYPE) {\n        soundSrc = enemyLaserSound;\n      }\n      let sound = new Howl({\n        src: [soundSrc]\n      });\n\n      sound.play();\n    }\n  }\n\n  render(ctx) {\n    if (this.type === PLAYER_BULLET_TYPE) {\n      // yellow\n      ctx.fillStyle = \"#EAEA39\"\n    } else {\n      ctx.fillStyle = \"#ffffff\"\n    }\n\n    ctx.fillRect(this.position.x, this.position.y, this.width, this.height);\n  }\n\n}","import Entity from \"./entity\"\nimport Vector2d from \"../util/vector\";\nimport {\n  Bullet,\n  ENEMY_BULLET_TYPE\n} from \"../entities/bullet\"\n\nimport Sprite from \"../util/sprite\"\n\nimport {\n  SPRITES_FILE_NAME\n} from \"../util/constants\";\n\nimport {\n  Howl,\n  Howler\n} from \"howler\";\n\nimport explosionSoundSrc from \"../sounds/explosion.mp3\";\n\nexport const HOME_STATE = \"HOME_STATE\";\nexport const CHASING_STATE = \"CHASING_STATE\";\n\nconst BULLET_FIRE_PERIOD = 10;\nconst BULLET_FIRE_PERCENT = 5;\n\nexport const RED_ENEMY = \"RED_ENEMY\"\nexport const GREEN_ENEMY = \"GREEN_ENEMY\"\nexport const PURPLE_ENEMY = \"PURPLE_ENEMY\"\nexport const GOLD_ENEMY = \"GOLD_ENEMY\"\n\nexport class Enemy extends Entity {\n  constructor({\n    position,\n    speed,\n    direction,\n    game,\n    image,\n    type\n  }) {\n    let sprite = null;\n    if (type === RED_ENEMY) {\n      sprite = new Sprite(image, new Vector2d(3, 2), position, [32, 32], 1, [3, 0, 1])\n    } else if (type === GREEN_ENEMY) {\n      sprite = new Sprite(image, new Vector2d(3, 66), position, [32, 32], 1, [3, 0, 1])\n    } else if (type === PURPLE_ENEMY) {\n      sprite = new Sprite(image, new Vector2d(3, 34), position, [32, 32], 1, [3, 0, 1])\n    } else if (type === GOLD_ENEMY) {\n      sprite = new Sprite(image, new Vector2d(3, 98), position, [32, 32], 1, [0])\n    }\n    let width = 32;\n    let height = 32;\n    super({\n      position,\n      speed,\n      direction,\n      width,\n      height,\n      game,\n      sprite\n    });\n\n    this.spriteImage = image;\n\n\n    this.firePercent = BULLET_FIRE_PERCENT;\n    this.firePeriod = Math.random * BULLET_FIRE_PERIOD;\n    this.state = HOME_STATE;\n\n    this.fireInterval = window.setInterval(this.fireTimer.bind(this), 100);\n  }\n\n  fireTimer(e) {\n    if (this.randomPercentage() < this.firePercent) {\n      let bullet = new Bullet({\n        position: new Vector2d(this.position.x, this.position.y),\n        type: ENEMY_BULLET_TYPE,\n        game: this.game,\n        width: 10,\n        height: 10,\n        game: this.game\n      })\n      this.game.addEntity(bullet);\n    }\n  }\n\n  die(game) {\n    let spriteFinishCallback = () => {\n      game.removeEntities([this]);\n    }\n\n    let sprite = new Sprite(this.spriteImage, new Vector2d(158, 139), this.position, [32, 32], 1,\n      [0, 1, 2], \"horizontal\", spriteFinishCallback)\n    this.sprite = sprite;\n    clearInterval(this.fireInterval);\n\n    if (game.soundOn) {\n      let sound = new Howl({\n        src: [explosionSoundSrc]\n      });\n\n      sound.play();\n    }\n  }\n\n  randomPercentage() {\n    return Math.floor(Math.random() * (800));\n  }\n}","import starfieldUrl from \"../img/starfield-640x480.png\"\n\nclass Background {\n  constructor() {\n    this.image = new Image();\n    this.image.src = starfieldUrl;\n\n  }\n\n  render(ctx) {\n    ctx.drawImage(this.image, 0, 0)\n  }\n}\n\nexport default Background;","import {\n  Enemy\n} from \"../entities/enemy\"\nimport Player from \"../entities/player\"\nimport Background from \"./background\"\n\n\nclass canvasController {\n  constructor(game) {\n    this.canvas = document.getElementById(\"canvas\");\n    this.context = canvas.getContext(\"2d\");\n    this.game = game;\n\n    this.background = new Background();\n  }\n\n\n\n  drawBox(color, entity) {\n    this.context.fillStyle = color;\n    this.context.fillRect(entity.position.x, entity.position.y, entity.width, entity.height);\n  }\n\n  render() {\n    this.context.clearRect(0, 0, this.canvas.width, this.canvas.height);\n    this.context.fillStyle = \"#000000\";\n    this.context.fillRect(0, 0, this.canvas.width, this.canvas.height);\n\n    this.background.render(this.context);\n\n\n    for (let i = 0; i < this.game.entities.length; i++) {\n      let entity = this.game.entities[i];\n\n      entity.render(this.context);\n    }\n\n    for (let i = 0; i < this.game.uiElements.length; i++) {\n      let uiElement = this.game.uiElements[i];\n      uiElement.render(this.context);\n    }\n    this.context.font = \"30px Arial\";\n    this.context.fillStyle = \"#ffffff\";\n    this.context.fillText(`Score: ${this.game.score}`, 300, 40);\n  }\n}\n\nexport default canvasController","import Sprite from \"../util/sprite\";\nimport Vector2d from \"../util/vector\"\n\nconst WAIT_TIME_AFTER_PLAYER_DEATH = 1000;\n\nclass PlayerLife {\n  constructor(\n    position,\n    image\n  ) {\n    let sprite = new Sprite(image, new Vector2d(2, 140), position, [32, 32], 1, [0]);\n    this.sprite = sprite;\n  }\n\n  removeLife() {\n\n  }\n\n  render(ctx) {\n    if (this.sprite) {\n      this.sprite.render(ctx);\n    }\n  }\n}\nexport default PlayerLife;","import {\n  Enemy,\n  HOME_STATE,\n  CHASING_STATE,\n  RED_ENEMY,\n  GREEN_ENEMY,\n  PURPLE_ENEMY,\n  GOLD_ENEMY\n} from \"../entities/enemy\"\n\nimport Player from \"../entities/player\"\nimport CanvasController from \"../controllers/canvas_controller\"\nimport Vector2d from \"../util/vector\";\nimport Rectangle from \"../util/rectangle\";\nimport {\n  ENEMY_BULLET_TYPE,\n  PLAYER_BULLET_TYPE,\n  Bullet\n} from \"../entities/bullet\"\n\nimport {\n  CANVAS_WIDTH,\n  CANVAS_HEIGHT\n} from \"../util/constants\"\n\nimport PlayerLife from \"../ui/player_life\"\n\nimport {\n  Howl,\n  Howler\n} from \"howler\";\n\nimport gameMusicSrc from \"../sounds/game_music.mp3\"\n\nimport spritesImagesUrl from \"../img/sprites-2x-transparent.png\";\n// import spritesImagesUrl from \"../img/sprites-4x.png\";\nconst spriteSize = 32; // 4x: 64, 2x: 32, 1x: 16\n\nconst PLAYER_SPEED = 50;\n\nclass Game {\n  constructor() {\n    this.canvasController = new CanvasController(this);\n  }\n\n  setup() {\n    this.setupVariables();\n    this.spritesImage = new Image();\n    this.spritesImage.src = spritesImagesUrl;\n    this.setupPlayer();\n    this.setupEnemies();\n    this.setupKeyHandlers();\n    this.setupUI();\n    this.setupMusic();\n    this.lastTime = Date.now();\n  }\n\n  setupMusic() {\n    let music = new Howl({\n      src: [gameMusicSrc],\n      loop: true\n    });\n\n    this.music = music;\n    this.music.play();\n\n  }\n\n  setupVariables() {\n    this.entities = [];\n    this.enemies = [];\n    this.bullets = [];\n    this.player = null;\n    this.started = false;\n\n    this.leftPressed = false;\n    this.rightPressed = false;\n    this.spacePressed = false;\n\n    this.livesRemaining = 3;\n    this.uiElements = [];\n    this.score = 0;\n    this.soundOn = true;\n  }\n\n  setupPlayer() {\n    let p = new Player({\n      direction: new Vector2d(0, 0),\n      position: new Vector2d(320, 500),\n      width: 20,\n      height: 20,\n      game: this,\n      image: this.spritesImage\n    });\n    this.addEntity(p);\n  }\n\n  setupEnemies() {\n    const topLeftPos = new Vector2d(100, 60);\n    const horzSpacing = 36;\n    const vertSpacing = 36;\n\n    let e1 = new Enemy({\n      direction: new Vector2d(10, 0),\n      position: new Vector2d(topLeftPos.x + horzSpacing * 3, topLeftPos.y),\n      game: this,\n      image: this.spritesImage,\n      type: GOLD_ENEMY\n    });\n    this.addEntity(e1);\n\n    e1 = new Enemy({\n      direction: new Vector2d(10, 0),\n      position: new Vector2d(topLeftPos.x + horzSpacing * 6, topLeftPos.y),\n      game: this,\n      image: this.spritesImage,\n      type: GOLD_ENEMY\n    });\n    this.addEntity(e1);\n\n\n    for (let horzIdx = 0; horzIdx < 6; horzIdx++) {\n      const e2 = new Enemy({\n        direction: new Vector2d(10, 0),\n        position: new Vector2d(topLeftPos.x + horzSpacing * (horzIdx + 2), topLeftPos.y + vertSpacing),\n        game: this,\n        image: this.spritesImage,\n        type: RED_ENEMY\n      });\n      this.addEntity(e2);\n    }\n\n\n    for (let horzIdx = 0; horzIdx < 8; horzIdx++) {\n      const e3 = new Enemy({\n        direction: new Vector2d(10, 0),\n        position: new Vector2d(topLeftPos.x + horzSpacing * (horzIdx + 1), topLeftPos.y + vertSpacing * 2),\n        game: this,\n        image: this.spritesImage,\n        type: PURPLE_ENEMY\n      });\n      this.addEntity(e3);\n    }\n\n    for (let horzIdx = 0; horzIdx < 8; horzIdx++) {\n      const e = new Enemy({\n        direction: new Vector2d(10, 0),\n        position: new Vector2d(topLeftPos.x + horzSpacing * (horzIdx + 1), topLeftPos.y + vertSpacing * 3),\n        game: this,\n        image: this.spritesImage,\n        type: GREEN_ENEMY\n      });\n      this.addEntity(e);\n    }\n    for (let horzIdx = 0; horzIdx < 10; horzIdx++) {\n      const e = new Enemy({\n        direction: new Vector2d(10, 0),\n        position: new Vector2d(topLeftPos.x + horzSpacing * horzIdx, topLeftPos.y + vertSpacing * 4),\n        game: this,\n        image: this.spritesImage,\n        type: GREEN_ENEMY\n      });\n      this.addEntity(e);\n    }\n    for (let horzIdx = 0; horzIdx < 10; horzIdx++) {\n      const e = new Enemy({\n        direction: new Vector2d(10, 0),\n        position: new Vector2d(topLeftPos.x + horzSpacing * horzIdx, topLeftPos.y + vertSpacing * 5),\n        game: this,\n        image: this.spritesImage,\n        type: GREEN_ENEMY\n      });\n      this.addEntity(e);\n    }\n\n    this.enemyBoundingRect = new Rectangle(0, 0, CANVAS_WIDTH, 200);\n  }\n\n  setupUI() {\n    for (let i = this.livesRemaining - 1; i >= 0; i--) {\n      const life = new PlayerLife(new Vector2d(20 + 40 * i, 550), this.spritesImage);\n      this.uiElements.push(life);\n    }\n\n    this.muteButton = document.getElementsByClassName(\"mute-btn\")[0];\n    this.muteButton.addEventListener(\"click\", this.toggleSound.bind(this));\n  }\n\n  toggleSound() {\n    const muteBtnIcon = document.getElementById(\"mute-btn-icon\");\n\n    // turn sound on\n    if (this.soundOn) {\n      muteBtnIcon.classList.remove(\"fa-volume-mute\");\n      muteBtnIcon.classList.add(\"fa-volume-up\");\n      this.music.mute(true);\n    } else {\n      muteBtnIcon.classList.remove(\"fa-volume-up\");\n      muteBtnIcon.classList.add(\"fa-volume-mute\");\n      this.music.mute(false);\n    }\n    this.soundOn = !this.soundOn;\n\n  }\n\n  setupKeyHandlers() {\n    document.addEventListener(\"keydown\", this.keyDownHandler.bind(this));\n    document.addEventListener(\"keyup\", this.keyUpHandler.bind(this));\n  }\n\n  keyDownHandler(e) {\n    e.preventDefault();\n    if (e.keyCode == 39) {\n      this.rightPressed = true;\n    } else if (e.keyCode == 37) {\n      this.leftPressed = true;\n    } else if (e.keyCode == 32) {\n      this.spacePressed = true;\n    }\n  }\n\n  keyUpHandler(e) {\n    if (e.keyCode == 39) {\n      this.rightPressed = false;\n    } else if (e.keyCode == 37) {\n      this.leftPressed = false;\n    } else if (e.keyCode == 32) {\n      this.spacePressed = false;\n    }\n  }\n\n  play() {\n    this.started = true;\n    this.setup();\n    window.requestAnimationFrame(this.update.bind(this));\n  }\n\n  gameWon() {\n    return this.enemies.length === 0;\n  }\n\n  concludeGame(message) {\n    const messageContainer = document.getElementsByClassName(\"game-over-container\")[0];\n    messageContainer.classList.remove(\"hidden\");\n    const messageEl = document.getElementsByClassName(\"game-over-message\")[0];\n    messageEl.innerText = message;\n    const playAgainBtn = document.getElementById(\"play-again-btn\");\n    playAgainBtn.addEventListener(\"click\", (e) => {\n      location.reload()\n    });\n  }\n\n  addEntity(entity) {\n    this.entities.push(entity);\n    if (entity instanceof Enemy) {\n      this.enemies.push(entity);\n    } else if (entity instanceof Player) {\n      this.player = entity;\n    } else if (entity instanceof Bullet) {\n      this.bullets.push(entity)\n    }\n    return this.entities;\n  }\n\n  removeEntities(entities) {\n    for (let i = 0; i < entities.length; i++) {\n      const entity = entities[i];\n      this.removeItemFromArray(entity, this.entities);\n\n      // removeItemFromArray checks if index is not found, so we can call on every array\n      this.removeItemFromArray(entity, this.enemies);\n      this.removeItemFromArray(entity, this.bullets);\n      if (entity instanceof Player) {\n        this.player = null;\n      }\n    }\n    return entities;\n  }\n\n  removeItemFromArray(item, array) {\n    const index = array.indexOf(item);\n    if (index > -1) {\n      array.splice(index, 1);\n    }\n  }\n\n  handleSpacePress() {\n    if (this.spacePressed && !this.bullets.some((bullet) => bullet.type === PLAYER_BULLET_TYPE)) {\n      let bullet = new Bullet({\n        position: new Vector2d(this.player.position.x + this.player.width / 2, this.player.position.y),\n        type: PLAYER_BULLET_TYPE,\n        game: this\n      });\n      this.addEntity(bullet);\n    }\n  }\n\n  handlePlayerMovement() {\n    if (this.leftPressed) {\n      this.player.direction = new Vector2d(-PLAYER_SPEED, 0);\n    } else if (this.rightPressed) {\n      this.player.direction = new Vector2d(PLAYER_SPEED, 0);\n    } else {\n      this.player.direction = new Vector2d(0, 0);\n    }\n  }\n\n  checkEntityInBounds(entity) {\n    this.handleBulletBounds(entity);\n    this.handleEnemyBounds(entity);\n  }\n\n  handleBulletBounds(entity) {\n    if (entity instanceof Bullet &&\n      (entity.position.y + entity.height < 0 || entity.position.y > CANVAS_HEIGHT)) {\n      this.removeEntities([entity]);\n    }\n  }\n\n  handleEnemyBounds(entity) {\n    if (entity instanceof Enemy) {\n      if (entity.state == HOME_STATE && (entity.position.x < this.enemyBoundingRect.left() || entity.position.x + entity.width > this.enemyBoundingRect.right())) {\n        for (let i = 0; i < this.enemies.length; i++) {\n          let enemy = this.enemies[i];\n          enemy.direction = new Vector2d(-1 * enemy.direction.x, enemy.direction.y);\n        }\n      }\n    }\n  }\n\n  checkCollisions() {\n    let collisionPairs = [];\n\n    for (let i = 0; i < this.enemies.length; i++) {\n      collisionPairs.push({\n        entity1: this.enemies[i],\n        entity2: this.player\n      })\n\n      for (let j = 0; j < this.bullets.length; j++) {\n        collisionPairs.push({\n          entity1: this.enemies[i],\n          entity2: this.bullets[j]\n        })\n\n        collisionPairs.push({\n          entity1: this.bullets[j],\n          entity2: this.player\n        })\n      }\n    }\n\n    for (let i = 0; i < collisionPairs.length; i++) {\n      let entity1 = collisionPairs[i].entity1;\n      let entity2 = collisionPairs[i].entity2;\n\n      if (entity1 && entity2 && entity1.collisionRect().intersects(entity2.collisionRect())) {\n        // enemy collides with player\n        if (entity1 instanceof Enemy && entity2 instanceof Player) {\n          this.handleEnemyPlayerCollision(entity1);\n        } else if (entity1 instanceof Enemy &&\n          entity2 instanceof Bullet &&\n          entity2.type == PLAYER_BULLET_TYPE) {\n          this.handleEnemyBulletCollision(entity1, entity2);\n        } else if (entity1 instanceof Bullet &&\n          entity2 instanceof Player &&\n          entity1.type == ENEMY_BULLET_TYPE) {\n          this.handlePlayerBulletCollision(entity1);\n        }\n      }\n    }\n  }\n\n  removeLife() {\n    this.livesRemaining -= 1;\n    const lifeIdx = this.uiElements.findIndex((el) => {\n      return el instanceof PlayerLife;\n    });\n    this.uiElements.splice(lifeIdx, 1);\n  }\n\n  handleEnemyPlayerCollision(enemy) {\n    this.player.die(this);\n    enemy.die(this);\n  }\n\n  handleEnemyBulletCollision(enemy, bullet) {\n    enemy.die(this);\n    this.removeEntities([bullet]);\n    this.score += 100;\n  }\n\n  handlePlayerBulletCollision(bullet) {\n    this.player.die(this);\n    this.removeEntities([bullet]);\n  }\n\n  checkGameOver() {\n    if (this.gameWon()) {\n      this.concludeGame(\"You Win!\");\n    } else if (this.livesRemaining <= 0) {\n      this.concludeGame(\"You Lose!\");\n    }\n  }\n\n  update() {\n    this.checkGameOver();\n\n    if (this.player && !this.player.dying) {\n      this.handlePlayerMovement();\n      this.handleSpacePress();\n    }\n    let now = Date.now();\n    let dt = (now - this.lastTime);\n\n    for (let i = 0; i < this.entities.length; i++) {\n      const entity = this.entities[i];\n\n      entity.update(dt);\n\n      this.checkEntityInBounds(entity);\n      this.checkCollisions();\n    }\n\n    this.canvasController.render();\n    this.lastTime = now;\n    window.requestAnimationFrame(this.update.bind(this))\n  }\n}\n\nexport default Game;","import Entity from \"../entities/entity\"\nimport Vector2d from \"../util/vector\"\nimport Player from \"../entities/player\"\nimport Game from \"../controllers/game\"\nimport {\n  Enemy\n} from \"../entities/enemy\"\n\nexport const testAddAndRemoveEntities = () => {\n  window.Entity = Entity;\n  window.vector = Vector2d;\n  window.player = Player;\n  let p1 = new Player({\n    direction: new vector(1, 1),\n    speed: 0.5,\n    position: new vector(20, 20)\n  });\n  window.p1 = p1;\n  let e1 = new Enemy({\n    direction: new vector(1, 1),\n    speed: 0.5,\n    position: new vector(20, 20)\n  });\n  window.e1 = e1;\n\n  window.game = Game;\n  let g = new Game();\n  window.g = g;\n\n  g.addEntity(e1);\n  g.addEntity(p1);\n}","import Entity from \"./entities/entity\"\nimport Vector2d from \"./util/vector\"\nimport Player from \"./entities/player\"\nimport Game from \"./controllers/game\"\nimport {\n  Enemy\n} from \"./entities/enemy\"\n\n\nimport laserSound from \"./sounds/laser_default.mp3\"\n\nimport {\n  testAddAndRemoveEntities\n} from \"./tests/game_tests\"\nimport {\n  testCanvas\n} from \"./tests/global_tests\"\n\n// testAddAndRemoveEntities();\n// testCanvas();\n\nconst setup = () => {\n  const game = new Game();\n\n  const playBtn = document.getElementById(\"play-btn\");\n  playBtn.addEventListener(\"click\", (e) => {\n    e.target.classList.add(\"hidden\");\n    game.play();\n  });\n\n  const aboutBtn = document.getElementById(\"project-info-button\");\n  aboutBtn.addEventListener(\"click\", toggleDescription);\n}\n\nconst toggleDescription = () => {\n  const description = document.getElementsByClassName(\"description\")[0];\n  const aboutBtn = document.getElementById(\"project-info-button\");\n\n  if (description.classList.contains(\"hidden\")) {\n    description.classList.remove(\"hidden\");\n    aboutBtn.innerText = \"Close\"\n  } else {\n    description.classList.add(\"hidden\");\n    aboutBtn.innerText = \"About the Project\"\n\n  }\n}\n\nsetup();"],"sourceRoot":""}